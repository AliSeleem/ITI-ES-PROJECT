
ITI-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a70  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00002a70  00002ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002310  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fcd  00000000  00000000  00004e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000060c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000099a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <main>
      7a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 ea       	ldi	r26, 0xA6	; 166
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 ea       	ldi	r24, 0xA6	; 166
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Dio_SetPortMode>:
#include <avr/io.h>
#include "Dio.h"
#include "BIT_MATH.h"

void Dio_SetPortMode (Dio_PortType port,Dio_PinModeType mode)  //Dio_setPortMode(DIO_PORTA,0xff)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <Dio_SetPortMode+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <Dio_SetPortMode+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	3c 83       	std	Y+4, r19	; 0x04
     b4e:	2b 83       	std	Y+3, r18	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	d1 f0       	breq	.+52     	; 0xb8e <Dio_SetPortMode+0x58>
     b5a:	2b 81       	ldd	r18, Y+3	; 0x03
     b5c:	3c 81       	ldd	r19, Y+4	; 0x04
     b5e:	22 30       	cpi	r18, 0x02	; 2
     b60:	31 05       	cpc	r19, r1
     b62:	2c f4       	brge	.+10     	; 0xb6e <Dio_SetPortMode+0x38>
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	61 f0       	breq	.+24     	; 0xb84 <Dio_SetPortMode+0x4e>
     b6c:	1e c0       	rjmp	.+60     	; 0xbaa <Dio_SetPortMode+0x74>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	81 f0       	breq	.+32     	; 0xb98 <Dio_SetPortMode+0x62>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	91 05       	cpc	r25, r1
     b80:	81 f0       	breq	.+32     	; 0xba2 <Dio_SetPortMode+0x6c>
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <Dio_SetPortMode+0x74>
	{
	case DIO_PORTA:
		DDRA = mode;
     b84:	ea e3       	ldi	r30, 0x3A	; 58
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	80 83       	st	Z, r24
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <Dio_SetPortMode+0x74>
		break;

	case DIO_PORTB:
		DDRB = mode;
     b8e:	e7 e3       	ldi	r30, 0x37	; 55
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	80 83       	st	Z, r24
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <Dio_SetPortMode+0x74>
		break;

	case DIO_PORTC:
		DDRC = mode;
     b98:	e4 e3       	ldi	r30, 0x34	; 52
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	80 83       	st	Z, r24
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <Dio_SetPortMode+0x74>
		break;

	case DIO_PORTD:
		DDRD = mode;
     ba2:	e1 e3       	ldi	r30, 0x31	; 49
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	80 83       	st	Z, r24
		break;

	default :
		break;
	}
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Dio_SetPortLevel>:

void Dio_SetPortLevel (Dio_PortType port,Dio_PortLevelType level)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <Dio_SetPortLevel+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <Dio_SetPortLevel+0x8>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3c 83       	std	Y+4, r19	; 0x04
     bd0:	2b 83       	std	Y+3, r18	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	d1 f0       	breq	.+52     	; 0xc10 <Dio_SetPortLevel+0x58>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <Dio_SetPortLevel+0x38>
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	61 f0       	breq	.+24     	; 0xc06 <Dio_SetPortLevel+0x4e>
     bee:	1e c0       	rjmp	.+60     	; 0xc2c <Dio_SetPortLevel+0x74>
     bf0:	2b 81       	ldd	r18, Y+3	; 0x03
     bf2:	3c 81       	ldd	r19, Y+4	; 0x04
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	81 f0       	breq	.+32     	; 0xc1a <Dio_SetPortLevel+0x62>
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	91 05       	cpc	r25, r1
     c02:	81 f0       	breq	.+32     	; 0xc24 <Dio_SetPortLevel+0x6c>
     c04:	13 c0       	rjmp	.+38     	; 0xc2c <Dio_SetPortLevel+0x74>
	{
	case DIO_PORTA:
		PORTA = level;
     c06:	eb e3       	ldi	r30, 0x3B	; 59
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	80 83       	st	Z, r24
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <Dio_SetPortLevel+0x74>
		break;

	case DIO_PORTB:
		PORTB = level;
     c10:	e8 e3       	ldi	r30, 0x38	; 56
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	80 83       	st	Z, r24
     c18:	09 c0       	rjmp	.+18     	; 0xc2c <Dio_SetPortLevel+0x74>
		break;

	case DIO_PORTC:
		PORTC = level;
     c1a:	e5 e3       	ldi	r30, 0x35	; 53
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	80 83       	st	Z, r24
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <Dio_SetPortLevel+0x74>
		break;

	case DIO_PORTD:
		PORTD = level;
     c24:	e2 e3       	ldi	r30, 0x32	; 50
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	80 83       	st	Z, r24
		break;

	default :
		break;
	}
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <Dio_ReadPortLevelType>:

Dio_PortLevelType Dio_ReadPortLevelType (Dio_PortType port)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <Dio_ReadPortLevelType+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <Dio_ReadPortLevelType+0x8>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType level = DIO_PORT_LOW;
     c48:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3c 83       	std	Y+4, r19	; 0x04
     c52:	2b 83       	std	Y+3, r18	; 0x03
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	91 05       	cpc	r25, r1
     c5c:	d1 f0       	breq	.+52     	; 0xc92 <Dio_ReadPortLevelType+0x58>
     c5e:	2b 81       	ldd	r18, Y+3	; 0x03
     c60:	3c 81       	ldd	r19, Y+4	; 0x04
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	2c f4       	brge	.+10     	; 0xc72 <Dio_ReadPortLevelType+0x38>
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	61 f0       	breq	.+24     	; 0xc88 <Dio_ReadPortLevelType+0x4e>
     c70:	1e c0       	rjmp	.+60     	; 0xcae <Dio_ReadPortLevelType+0x74>
     c72:	2b 81       	ldd	r18, Y+3	; 0x03
     c74:	3c 81       	ldd	r19, Y+4	; 0x04
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	81 f0       	breq	.+32     	; 0xc9c <Dio_ReadPortLevelType+0x62>
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	91 05       	cpc	r25, r1
     c84:	81 f0       	breq	.+32     	; 0xca6 <Dio_ReadPortLevelType+0x6c>
     c86:	13 c0       	rjmp	.+38     	; 0xcae <Dio_ReadPortLevelType+0x74>
	{
	case DIO_PORTA:
		level = PINA;
     c88:	e9 e3       	ldi	r30, 0x39	; 57
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	0e c0       	rjmp	.+28     	; 0xcae <Dio_ReadPortLevelType+0x74>
		break;

	case DIO_PORTB:
		level = PINB;
     c92:	e6 e3       	ldi	r30, 0x36	; 54
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	09 c0       	rjmp	.+18     	; 0xcae <Dio_ReadPortLevelType+0x74>
		break;

	case DIO_PORTC:
		level = PINC;
     c9c:	e3 e3       	ldi	r30, 0x33	; 51
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <Dio_ReadPortLevelType+0x74>
		break;

	case DIO_PORTD:
		level = PIND;
     ca6:	e0 e3       	ldi	r30, 0x30	; 48
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	89 83       	std	Y+1, r24	; 0x01
		break;

	default :
		break;
	}
	return level;
     cae:	89 81       	ldd	r24, Y+1	; 0x01

}
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <DioSetPinMode>:


void DioSetPinMode (Dio_PortType port, Dio_PinType pin, Dio_PinModeType mode)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	29 97       	sbiw	r28, 0x09	; 9
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	6a 83       	std	Y+2, r22	; 0x02
     cd6:	4b 83       	std	Y+3, r20	; 0x03
	if(mode == DIO_PIN_OUTPUT)
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	88 23       	and	r24, r24
     cdc:	09 f0       	breq	.+2      	; 0xce0 <DioSetPinMode+0x22>
     cde:	6f c0       	rjmp	.+222    	; 0xdbe <DioSetPinMode+0x100>
	{
		switch(port)
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	39 87       	std	Y+9, r19	; 0x09
     ce8:	28 87       	std	Y+8, r18	; 0x08
     cea:	88 85       	ldd	r24, Y+8	; 0x08
     cec:	99 85       	ldd	r25, Y+9	; 0x09
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	91 05       	cpc	r25, r1
     cf2:	49 f1       	breq	.+82     	; 0xd46 <DioSetPinMode+0x88>
     cf4:	28 85       	ldd	r18, Y+8	; 0x08
     cf6:	39 85       	ldd	r19, Y+9	; 0x09
     cf8:	22 30       	cpi	r18, 0x02	; 2
     cfa:	31 05       	cpc	r19, r1
     cfc:	2c f4       	brge	.+10     	; 0xd08 <DioSetPinMode+0x4a>
     cfe:	88 85       	ldd	r24, Y+8	; 0x08
     d00:	99 85       	ldd	r25, Y+9	; 0x09
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	61 f0       	breq	.+24     	; 0xd1e <DioSetPinMode+0x60>
     d06:	e2 c1       	rjmp	.+964    	; 0x10cc <DioSetPinMode+0x40e>
     d08:	28 85       	ldd	r18, Y+8	; 0x08
     d0a:	39 85       	ldd	r19, Y+9	; 0x09
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	71 f1       	breq	.+92     	; 0xd6e <DioSetPinMode+0xb0>
     d12:	88 85       	ldd	r24, Y+8	; 0x08
     d14:	99 85       	ldd	r25, Y+9	; 0x09
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	91 05       	cpc	r25, r1
     d1a:	e9 f1       	breq	.+122    	; 0xd96 <DioSetPinMode+0xd8>
     d1c:	d7 c1       	rjmp	.+942    	; 0x10cc <DioSetPinMode+0x40e>
		{
		case DIO_PORTA:
			SET_BIT(DDRA,pin);
     d1e:	aa e3       	ldi	r26, 0x3A	; 58
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e3       	ldi	r30, 0x3A	; 58
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DioSetPinMode+0x7e>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DioSetPinMode+0x7a>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	c3 c1       	rjmp	.+902    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTB:
			SET_BIT(DDRB,pin);
     d46:	a7 e3       	ldi	r26, 0x37	; 55
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e3       	ldi	r30, 0x37	; 55
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DioSetPinMode+0xa6>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DioSetPinMode+0xa2>
     d68:	84 2b       	or	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	af c1       	rjmp	.+862    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC,pin);
     d6e:	a4 e3       	ldi	r26, 0x34	; 52
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e4 e3       	ldi	r30, 0x34	; 52
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DioSetPinMode+0xce>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DioSetPinMode+0xca>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	9b c1       	rjmp	.+822    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTD:
			SET_BIT(DDRD,pin);
     d96:	a1 e3       	ldi	r26, 0x31	; 49
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e1 e3       	ldi	r30, 0x31	; 49
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DioSetPinMode+0xf6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DioSetPinMode+0xf2>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	87 c1       	rjmp	.+782    	; 0x10cc <DioSetPinMode+0x40e>
		default :
			break;
		}

	}
	else if(mode == DIO_PIN_INPUT_FLOATING)
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <DioSetPinMode+0x108>
     dc4:	c2 c0       	rjmp	.+388    	; 0xf4a <DioSetPinMode+0x28c>
	{
		switch(port)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3f 83       	std	Y+7, r19	; 0x07
     dce:	2e 83       	std	Y+6, r18	; 0x06
     dd0:	8e 81       	ldd	r24, Y+6	; 0x06
     dd2:	9f 81       	ldd	r25, Y+7	; 0x07
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <DioSetPinMode+0x11e>
     dda:	3f c0       	rjmp	.+126    	; 0xe5a <DioSetPinMode+0x19c>
     ddc:	2e 81       	ldd	r18, Y+6	; 0x06
     dde:	3f 81       	ldd	r19, Y+7	; 0x07
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	2c f4       	brge	.+10     	; 0xdf0 <DioSetPinMode+0x132>
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	9f 81       	ldd	r25, Y+7	; 0x07
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	71 f0       	breq	.+28     	; 0xe0a <DioSetPinMode+0x14c>
     dee:	6e c1       	rjmp	.+732    	; 0x10cc <DioSetPinMode+0x40e>
     df0:	2e 81       	ldd	r18, Y+6	; 0x06
     df2:	3f 81       	ldd	r19, Y+7	; 0x07
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <DioSetPinMode+0x13e>
     dfa:	57 c0       	rjmp	.+174    	; 0xeaa <DioSetPinMode+0x1ec>
     dfc:	8e 81       	ldd	r24, Y+6	; 0x06
     dfe:	9f 81       	ldd	r25, Y+7	; 0x07
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	91 05       	cpc	r25, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <DioSetPinMode+0x14a>
     e06:	79 c0       	rjmp	.+242    	; 0xefa <DioSetPinMode+0x23c>
     e08:	61 c1       	rjmp	.+706    	; 0x10cc <DioSetPinMode+0x40e>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA,pin);
     e0a:	aa e3       	ldi	r26, 0x3A	; 58
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ea e3       	ldi	r30, 0x3A	; 58
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DioSetPinMode+0x168>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	2a 95       	dec	r18
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DioSetPinMode+0x164>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin);
     e30:	ab e3       	ldi	r26, 0x3B	; 59
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	eb e3       	ldi	r30, 0x3B	; 59
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DioSetPinMode+0x190>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DioSetPinMode+0x18c>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	39 c1       	rjmp	.+626    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB,pin);
     e5a:	a7 e3       	ldi	r26, 0x37	; 55
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e7 e3       	ldi	r30, 0x37	; 55
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DioSetPinMode+0x1b8>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	2a 95       	dec	r18
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DioSetPinMode+0x1b4>
     e7a:	80 95       	com	r24
     e7c:	84 23       	and	r24, r20
     e7e:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin);
     e80:	a8 e3       	ldi	r26, 0x38	; 56
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e8 e3       	ldi	r30, 0x38	; 56
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DioSetPinMode+0x1e0>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DioSetPinMode+0x1dc>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	11 c1       	rjmp	.+546    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC,pin);
     eaa:	a4 e3       	ldi	r26, 0x34	; 52
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e4 e3       	ldi	r30, 0x34	; 52
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DioSetPinMode+0x208>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	2a 95       	dec	r18
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DioSetPinMode+0x204>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin);
     ed0:	a5 e3       	ldi	r26, 0x35	; 53
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e3       	ldi	r30, 0x35	; 53
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DioSetPinMode+0x230>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DioSetPinMode+0x22c>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	e9 c0       	rjmp	.+466    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD,pin);
     efa:	a1 e3       	ldi	r26, 0x31	; 49
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e3       	ldi	r30, 0x31	; 49
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DioSetPinMode+0x258>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	2a 95       	dec	r18
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DioSetPinMode+0x254>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin);
     f20:	a2 e3       	ldi	r26, 0x32	; 50
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e2 e3       	ldi	r30, 0x32	; 50
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DioSetPinMode+0x280>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DioSetPinMode+0x27c>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	c1 c0       	rjmp	.+386    	; 0x10cc <DioSetPinMode+0x40e>
		default :
			break;

		}
	}
	else if(mode == DIO_PIN_INPUT_PULLUP)
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	09 f0       	breq	.+2      	; 0xf52 <DioSetPinMode+0x294>
     f50:	bd c0       	rjmp	.+378    	; 0x10cc <DioSetPinMode+0x40e>
	{
		switch(port)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3d 83       	std	Y+5, r19	; 0x05
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <DioSetPinMode+0x2aa>
     f66:	3e c0       	rjmp	.+124    	; 0xfe4 <DioSetPinMode+0x326>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	2c f4       	brge	.+10     	; 0xf7c <DioSetPinMode+0x2be>
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	71 f0       	breq	.+28     	; 0xf96 <DioSetPinMode+0x2d8>
     f7a:	a8 c0       	rjmp	.+336    	; 0x10cc <DioSetPinMode+0x40e>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <DioSetPinMode+0x2ca>
     f86:	55 c0       	rjmp	.+170    	; 0x1032 <DioSetPinMode+0x374>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DioSetPinMode+0x2d6>
     f92:	76 c0       	rjmp	.+236    	; 0x1080 <DioSetPinMode+0x3c2>
     f94:	9b c0       	rjmp	.+310    	; 0x10cc <DioSetPinMode+0x40e>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA,pin);
     f96:	aa e3       	ldi	r26, 0x3A	; 58
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ea e3       	ldi	r30, 0x3A	; 58
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DioSetPinMode+0x2f4>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	2a 95       	dec	r18
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DioSetPinMode+0x2f0>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin);
     fbc:	ab e3       	ldi	r26, 0x3B	; 59
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	eb e3       	ldi	r30, 0x3B	; 59
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DioSetPinMode+0x31c>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DioSetPinMode+0x318>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	74 c0       	rjmp	.+232    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB,pin);
     fe4:	a7 e3       	ldi	r26, 0x37	; 55
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e7 e3       	ldi	r30, 0x37	; 55
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DioSetPinMode+0x342>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	2a 95       	dec	r18
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DioSetPinMode+0x33e>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin);
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DioSetPinMode+0x36a>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DioSetPinMode+0x366>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	4d c0       	rjmp	.+154    	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC,pin);
    1032:	a4 e3       	ldi	r26, 0x34	; 52
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e4 e3       	ldi	r30, 0x34	; 52
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DioSetPinMode+0x390>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	2a 95       	dec	r18
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DioSetPinMode+0x38c>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin);
    1058:	a5 e3       	ldi	r26, 0x35	; 53
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e5 e3       	ldi	r30, 0x35	; 53
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DioSetPinMode+0x3b8>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DioSetPinMode+0x3b4>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	26 c0       	rjmp	.+76     	; 0x10cc <DioSetPinMode+0x40e>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD,pin);
    1080:	a1 e3       	ldi	r26, 0x31	; 49
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e1 e3       	ldi	r30, 0x31	; 49
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DioSetPinMode+0x3de>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	2a 95       	dec	r18
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DioSetPinMode+0x3da>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin);
    10a6:	a2 e3       	ldi	r26, 0x32	; 50
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e2 e3       	ldi	r30, 0x32	; 50
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DioSetPinMode+0x406>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DioSetPinMode+0x402>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
			break;
		default :
			break;
		}
	}
}
    10cc:	29 96       	adiw	r28, 0x09	; 9
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <Dio_SetPinLevel>:


void Dio_SetPinLevel (Dio_PortType port, Dio_PinType pin, Dio_PinLevelType level)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	27 97       	sbiw	r28, 0x07	; 7
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	6a 83       	std	Y+2, r22	; 0x02
    10f6:	4b 83       	std	Y+3, r20	; 0x03
	if (level == STD_HIGH)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	09 f0       	breq	.+2      	; 0x1100 <Dio_SetPinLevel+0x22>
    10fe:	6f c0       	rjmp	.+222    	; 0x11de <Dio_SetPinLevel+0x100>
	{
		switch(port)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3f 83       	std	Y+7, r19	; 0x07
    1108:	2e 83       	std	Y+6, r18	; 0x06
    110a:	8e 81       	ldd	r24, Y+6	; 0x06
    110c:	9f 81       	ldd	r25, Y+7	; 0x07
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	49 f1       	breq	.+82     	; 0x1166 <Dio_SetPinLevel+0x88>
    1114:	2e 81       	ldd	r18, Y+6	; 0x06
    1116:	3f 81       	ldd	r19, Y+7	; 0x07
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	2c f4       	brge	.+10     	; 0x1128 <Dio_SetPinLevel+0x4a>
    111e:	8e 81       	ldd	r24, Y+6	; 0x06
    1120:	9f 81       	ldd	r25, Y+7	; 0x07
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	61 f0       	breq	.+24     	; 0x113e <Dio_SetPinLevel+0x60>
    1126:	d2 c0       	rjmp	.+420    	; 0x12cc <Dio_SetPinLevel+0x1ee>
    1128:	2e 81       	ldd	r18, Y+6	; 0x06
    112a:	3f 81       	ldd	r19, Y+7	; 0x07
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	71 f1       	breq	.+92     	; 0x118e <Dio_SetPinLevel+0xb0>
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	e9 f1       	breq	.+122    	; 0x11b6 <Dio_SetPinLevel+0xd8>
    113c:	c7 c0       	rjmp	.+398    	; 0x12cc <Dio_SetPinLevel+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(PORTA,pin);
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <Dio_SetPinLevel+0x7e>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <Dio_SetPinLevel+0x7a>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	b3 c0       	rjmp	.+358    	; 0x12cc <Dio_SetPinLevel+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(PORTB,pin);
    1166:	a8 e3       	ldi	r26, 0x38	; 56
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e8 e3       	ldi	r30, 0x38	; 56
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <Dio_SetPinLevel+0xa6>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <Dio_SetPinLevel+0xa2>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	9f c0       	rjmp	.+318    	; 0x12cc <Dio_SetPinLevel+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC,pin);
    118e:	a5 e3       	ldi	r26, 0x35	; 53
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e5 e3       	ldi	r30, 0x35	; 53
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <Dio_SetPinLevel+0xce>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <Dio_SetPinLevel+0xca>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	8b c0       	rjmp	.+278    	; 0x12cc <Dio_SetPinLevel+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(PORTD,pin);
    11b6:	a2 e3       	ldi	r26, 0x32	; 50
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e2 e3       	ldi	r30, 0x32	; 50
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <Dio_SetPinLevel+0xf6>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <Dio_SetPinLevel+0xf2>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	77 c0       	rjmp	.+238    	; 0x12cc <Dio_SetPinLevel+0x1ee>
			break;
		default :
			break;
		}
	}
	else if (level == STD_LOW)
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 23       	and	r24, r24
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <Dio_SetPinLevel+0x108>
    11e4:	73 c0       	rjmp	.+230    	; 0x12cc <Dio_SetPinLevel+0x1ee>
	{
		switch(port)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	59 f1       	breq	.+86     	; 0x1250 <Dio_SetPinLevel+0x172>
    11fa:	2c 81       	ldd	r18, Y+4	; 0x04
    11fc:	3d 81       	ldd	r19, Y+5	; 0x05
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <Dio_SetPinLevel+0x130>
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	69 f0       	breq	.+26     	; 0x1226 <Dio_SetPinLevel+0x148>
    120c:	5f c0       	rjmp	.+190    	; 0x12cc <Dio_SetPinLevel+0x1ee>
    120e:	2c 81       	ldd	r18, Y+4	; 0x04
    1210:	3d 81       	ldd	r19, Y+5	; 0x05
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	89 f1       	breq	.+98     	; 0x127a <Dio_SetPinLevel+0x19c>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <Dio_SetPinLevel+0x146>
    1222:	40 c0       	rjmp	.+128    	; 0x12a4 <Dio_SetPinLevel+0x1c6>
    1224:	53 c0       	rjmp	.+166    	; 0x12cc <Dio_SetPinLevel+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(PORTA,pin);
    1226:	ab e3       	ldi	r26, 0x3B	; 59
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	eb e3       	ldi	r30, 0x3B	; 59
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <Dio_SetPinLevel+0x166>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <Dio_SetPinLevel+0x162>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	3e c0       	rjmp	.+124    	; 0x12cc <Dio_SetPinLevel+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(PORTB,pin);
    1250:	a8 e3       	ldi	r26, 0x38	; 56
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <Dio_SetPinLevel+0x190>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <Dio_SetPinLevel+0x18c>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	29 c0       	rjmp	.+82     	; 0x12cc <Dio_SetPinLevel+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(PORTC,pin);
    127a:	a5 e3       	ldi	r26, 0x35	; 53
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e5 e3       	ldi	r30, 0x35	; 53
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <Dio_SetPinLevel+0x1ba>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <Dio_SetPinLevel+0x1b6>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <Dio_SetPinLevel+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(PORTD,pin);
    12a4:	a2 e3       	ldi	r26, 0x32	; 50
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e2 e3       	ldi	r30, 0x32	; 50
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <Dio_SetPinLevel+0x1e4>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <Dio_SetPinLevel+0x1e0>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
		default :
			break;

		}
	}
}
    12cc:	27 96       	adiw	r28, 0x07	; 7
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <Dio_FlipPinLevel>:


Dio_PinLevelType Dio_FlipPinLevel (Dio_PortType port, Dio_PinType pin)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <Dio_FlipPinLevel+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <Dio_FlipPinLevel+0x8>
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8a 83       	std	Y+2, r24	; 0x02
    12ee:	6b 83       	std	Y+3, r22	; 0x03
	Dio_PinLevelType level = STD_HIGH;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3d 83       	std	Y+5, r19	; 0x05
    12fc:	2c 83       	std	Y+4, r18	; 0x04
    12fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1300:	5d 81       	ldd	r21, Y+5	; 0x05
    1302:	41 30       	cpi	r20, 0x01	; 1
    1304:	51 05       	cpc	r21, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <Dio_FlipPinLevel+0x2c>
    1308:	3c c0       	rjmp	.+120    	; 0x1382 <Dio_FlipPinLevel+0xa4>
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	91 05       	cpc	r25, r1
    1312:	34 f4       	brge	.+12     	; 0x1320 <Dio_FlipPinLevel+0x42>
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	71 f0       	breq	.+28     	; 0x133a <Dio_FlipPinLevel+0x5c>
    131e:	9c c0       	rjmp	.+312    	; 0x1458 <Dio_FlipPinLevel+0x17a>
    1320:	4c 81       	ldd	r20, Y+4	; 0x04
    1322:	5d 81       	ldd	r21, Y+5	; 0x05
    1324:	42 30       	cpi	r20, 0x02	; 2
    1326:	51 05       	cpc	r21, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <Dio_FlipPinLevel+0x4e>
    132a:	4f c0       	rjmp	.+158    	; 0x13ca <Dio_FlipPinLevel+0xec>
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	91 05       	cpc	r25, r1
    1334:	09 f4       	brne	.+2      	; 0x1338 <Dio_FlipPinLevel+0x5a>
    1336:	6d c0       	rjmp	.+218    	; 0x1412 <Dio_FlipPinLevel+0x134>
    1338:	8f c0       	rjmp	.+286    	; 0x1458 <Dio_FlipPinLevel+0x17a>
	{
	case DIO_PORTA:
		TOG_BIT(PORTA,pin);
    133a:	ab e3       	ldi	r26, 0x3B	; 59
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	eb e3       	ldi	r30, 0x3B	; 59
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <Dio_FlipPinLevel+0x78>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	2a 95       	dec	r18
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <Dio_FlipPinLevel+0x74>
    135a:	84 27       	eor	r24, r20
    135c:	8c 93       	st	X, r24
		level = GET_BIT(PORTA,pin);
    135e:	eb e3       	ldi	r30, 0x3B	; 59
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <Dio_FlipPinLevel+0x98>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <Dio_FlipPinLevel+0x94>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6b c0       	rjmp	.+214    	; 0x1458 <Dio_FlipPinLevel+0x17a>
		break;
	case DIO_PORTB:
		TOG_BIT(PORTB,pin);
    1382:	a8 e3       	ldi	r26, 0x38	; 56
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e8 e3       	ldi	r30, 0x38	; 56
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <Dio_FlipPinLevel+0xc0>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	2a 95       	dec	r18
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <Dio_FlipPinLevel+0xbc>
    13a2:	84 27       	eor	r24, r20
    13a4:	8c 93       	st	X, r24
		level = GET_BIT(PORTB,pin);
    13a6:	e8 e3       	ldi	r30, 0x38	; 56
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <Dio_FlipPinLevel+0xe0>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <Dio_FlipPinLevel+0xdc>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	47 c0       	rjmp	.+142    	; 0x1458 <Dio_FlipPinLevel+0x17a>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC,pin);
    13ca:	a5 e3       	ldi	r26, 0x35	; 53
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <Dio_FlipPinLevel+0x108>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	2a 95       	dec	r18
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <Dio_FlipPinLevel+0x104>
    13ea:	84 27       	eor	r24, r20
    13ec:	8c 93       	st	X, r24
		level = GET_BIT(PORTC,pin);
    13ee:	e5 e3       	ldi	r30, 0x35	; 53
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <Dio_FlipPinLevel+0x128>
    1402:	55 95       	asr	r21
    1404:	47 95       	ror	r20
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <Dio_FlipPinLevel+0x124>
    140a:	ca 01       	movw	r24, r20
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	23 c0       	rjmp	.+70     	; 0x1458 <Dio_FlipPinLevel+0x17a>
		break;
	case DIO_PORTD:
		TOG_BIT(PORTD,pin);
    1412:	a2 e3       	ldi	r26, 0x32	; 50
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <Dio_FlipPinLevel+0x150>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	2a 95       	dec	r18
    1430:	e2 f7       	brpl	.-8      	; 0x142a <Dio_FlipPinLevel+0x14c>
    1432:	84 27       	eor	r24, r20
    1434:	8c 93       	st	X, r24
		level = GET_BIT(PORTD,pin);
    1436:	e2 e3       	ldi	r30, 0x32	; 50
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a9 01       	movw	r20, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <Dio_FlipPinLevel+0x170>
    144a:	55 95       	asr	r21
    144c:	47 95       	ror	r20
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <Dio_FlipPinLevel+0x16c>
    1452:	ca 01       	movw	r24, r20
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
		break;
	default :
		break;
	}
	return level;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <Dio_ToggelPinLevel>:


void Dio_ToggelPinLevel (Dio_PortType port , Dio_PinType pin){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <Dio_ToggelPinLevel+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <Dio_ToggelPinLevel+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3c 83       	std	Y+4, r19	; 0x04
    1482:	2b 83       	std	Y+3, r18	; 0x03
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	49 f1       	breq	.+82     	; 0x14e0 <Dio_ToggelPinLevel+0x76>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	2c f4       	brge	.+10     	; 0x14a2 <Dio_ToggelPinLevel+0x38>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	61 f0       	breq	.+24     	; 0x14b8 <Dio_ToggelPinLevel+0x4e>
    14a0:	5a c0       	rjmp	.+180    	; 0x1556 <Dio_ToggelPinLevel+0xec>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	71 f1       	breq	.+92     	; 0x1508 <Dio_ToggelPinLevel+0x9e>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	e9 f1       	breq	.+122    	; 0x1530 <Dio_ToggelPinLevel+0xc6>
    14b6:	4f c0       	rjmp	.+158    	; 0x1556 <Dio_ToggelPinLevel+0xec>
	{
	case DIO_PORTA:
		TOG_BIT(PORTA,pin);
    14b8:	ab e3       	ldi	r26, 0x3B	; 59
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	eb e3       	ldi	r30, 0x3B	; 59
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <Dio_ToggelPinLevel+0x6c>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <Dio_ToggelPinLevel+0x68>
    14da:	84 27       	eor	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	3b c0       	rjmp	.+118    	; 0x1556 <Dio_ToggelPinLevel+0xec>
		break;
	case DIO_PORTB:
		TOG_BIT(PORTB,pin);
    14e0:	a8 e3       	ldi	r26, 0x38	; 56
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e8 e3       	ldi	r30, 0x38	; 56
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <Dio_ToggelPinLevel+0x94>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <Dio_ToggelPinLevel+0x90>
    1502:	84 27       	eor	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <Dio_ToggelPinLevel+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC,pin);
    1508:	a5 e3       	ldi	r26, 0x35	; 53
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e5 e3       	ldi	r30, 0x35	; 53
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <Dio_ToggelPinLevel+0xbc>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <Dio_ToggelPinLevel+0xb8>
    152a:	84 27       	eor	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <Dio_ToggelPinLevel+0xec>
		break;
	case DIO_PORTD:
		TOG_BIT(PORTD,pin);
    1530:	a2 e3       	ldi	r26, 0x32	; 50
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e2 e3       	ldi	r30, 0x32	; 50
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <Dio_ToggelPinLevel+0xe4>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <Dio_ToggelPinLevel+0xe0>
    1552:	84 27       	eor	r24, r20
    1554:	8c 93       	st	X, r24
		break;
	default :
		break;
	}
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <Dio_ReadPinLevel>:

Dio_PinLevelType Dio_ReadPinLevel (Dio_PortType port, Dio_PinType pin)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <Dio_ReadPinLevel+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <Dio_ReadPinLevel+0x8>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	6b 83       	std	Y+3, r22	; 0x03
	Dio_PinLevelType level = STD_LOW;
    1576:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3d 83       	std	Y+5, r19	; 0x05
    1580:	2c 83       	std	Y+4, r18	; 0x04
    1582:	4c 81       	ldd	r20, Y+4	; 0x04
    1584:	5d 81       	ldd	r21, Y+5	; 0x05
    1586:	41 30       	cpi	r20, 0x01	; 1
    1588:	51 05       	cpc	r21, r1
    158a:	71 f1       	breq	.+92     	; 0x15e8 <Dio_ReadPinLevel+0x84>
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	91 05       	cpc	r25, r1
    1594:	34 f4       	brge	.+12     	; 0x15a2 <Dio_ReadPinLevel+0x3e>
    1596:	2c 81       	ldd	r18, Y+4	; 0x04
    1598:	3d 81       	ldd	r19, Y+5	; 0x05
    159a:	21 15       	cp	r18, r1
    159c:	31 05       	cpc	r19, r1
    159e:	69 f0       	breq	.+26     	; 0x15ba <Dio_ReadPinLevel+0x56>
    15a0:	64 c0       	rjmp	.+200    	; 0x166a <Dio_ReadPinLevel+0x106>
    15a2:	4c 81       	ldd	r20, Y+4	; 0x04
    15a4:	5d 81       	ldd	r21, Y+5	; 0x05
    15a6:	42 30       	cpi	r20, 0x02	; 2
    15a8:	51 05       	cpc	r21, r1
    15aa:	a1 f1       	breq	.+104    	; 0x1614 <Dio_ReadPinLevel+0xb0>
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <Dio_ReadPinLevel+0x54>
    15b6:	44 c0       	rjmp	.+136    	; 0x1640 <Dio_ReadPinLevel+0xdc>
    15b8:	58 c0       	rjmp	.+176    	; 0x166a <Dio_ReadPinLevel+0x106>
	{
	case DIO_PORTA:
		if(GET_BIT(PINA,pin) == 1)
    15ba:	e9 e3       	ldi	r30, 0x39	; 57
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <Dio_ReadPinLevel+0x6e>
    15ce:	55 95       	asr	r21
    15d0:	47 95       	ror	r20
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <Dio_ReadPinLevel+0x6a>
    15d6:	ca 01       	movw	r24, r20
    15d8:	81 70       	andi	r24, 0x01	; 1
    15da:	90 70       	andi	r25, 0x00	; 0
    15dc:	88 23       	and	r24, r24
    15de:	09 f4       	brne	.+2      	; 0x15e2 <Dio_ReadPinLevel+0x7e>
    15e0:	44 c0       	rjmp	.+136    	; 0x166a <Dio_ReadPinLevel+0x106>
		{
			level = STD_HIGH;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	41 c0       	rjmp	.+130    	; 0x166a <Dio_ReadPinLevel+0x106>
		}
		break;
	case DIO_PORTB:
		if(GET_BIT(PINB,pin)== 1)
    15e8:	e6 e3       	ldi	r30, 0x36	; 54
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a9 01       	movw	r20, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <Dio_ReadPinLevel+0x9c>
    15fc:	55 95       	asr	r21
    15fe:	47 95       	ror	r20
    1600:	8a 95       	dec	r24
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <Dio_ReadPinLevel+0x98>
    1604:	ca 01       	movw	r24, r20
    1606:	81 70       	andi	r24, 0x01	; 1
    1608:	90 70       	andi	r25, 0x00	; 0
    160a:	88 23       	and	r24, r24
    160c:	71 f1       	breq	.+92     	; 0x166a <Dio_ReadPinLevel+0x106>
		{
			level = STD_HIGH;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	2b c0       	rjmp	.+86     	; 0x166a <Dio_ReadPinLevel+0x106>
		}
		break;
	case DIO_PORTC:
		if(GET_BIT(PINC,pin) == 1)
    1614:	e3 e3       	ldi	r30, 0x33	; 51
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <Dio_ReadPinLevel+0xc8>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <Dio_ReadPinLevel+0xc4>
    1630:	ca 01       	movw	r24, r20
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	90 70       	andi	r25, 0x00	; 0
    1636:	88 23       	and	r24, r24
    1638:	c1 f0       	breq	.+48     	; 0x166a <Dio_ReadPinLevel+0x106>
		{
			level = STD_HIGH;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	15 c0       	rjmp	.+42     	; 0x166a <Dio_ReadPinLevel+0x106>
		}

		break;
	case DIO_PORTD:
		if(GET_BIT(PIND,pin) == 1)
    1640:	e0 e3       	ldi	r30, 0x30	; 48
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <Dio_ReadPinLevel+0xf4>
    1654:	55 95       	asr	r21
    1656:	47 95       	ror	r20
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <Dio_ReadPinLevel+0xf0>
    165c:	ca 01       	movw	r24, r20
    165e:	81 70       	andi	r24, 0x01	; 1
    1660:	90 70       	andi	r25, 0x00	; 0
    1662:	88 23       	and	r24, r24
    1664:	11 f0       	breq	.+4      	; 0x166a <Dio_ReadPinLevel+0x106>
		{
			level = STD_HIGH;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return level;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <Keypad_Init>:
#include "STD_TYPES.h"

static void Keypad_SetColumnLevel(u8 column , Dio_PinLevelType level);
static Dio_PinLevelType Keypad_GetRowLevel(u8 row);

void Keypad_Init(void){
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	DioSetPinMode(KEYPAD_PIN_R1, DIO_PIN_INPUT_PULLUP);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	63 e0       	ldi	r22, 0x03	; 3
    1688:	42 e0       	ldi	r20, 0x02	; 2
    168a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode(KEYPAD_PIN_R2, DIO_PIN_INPUT_PULLUP);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	64 e0       	ldi	r22, 0x04	; 4
    1692:	42 e0       	ldi	r20, 0x02	; 2
    1694:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode(KEYPAD_PIN_R3, DIO_PIN_INPUT_PULLUP);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	65 e0       	ldi	r22, 0x05	; 5
    169c:	42 e0       	ldi	r20, 0x02	; 2
    169e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode(KEYPAD_PIN_R4, DIO_PIN_INPUT_PULLUP);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	66 e0       	ldi	r22, 0x06	; 6
    16a6:	42 e0       	ldi	r20, 0x02	; 2
    16a8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>


	DioSetPinMode(KEYPAD_PIN_C1, DIO_PIN_OUTPUT);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode(KEYPAD_PIN_C2, DIO_PIN_OUTPUT);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode(KEYPAD_PIN_C3, DIO_PIN_OUTPUT);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	62 e0       	ldi	r22, 0x02	; 2
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>

	Dio_SetPinLevel(KEYPAD_PIN_C1 , STD_HIGH);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(KEYPAD_PIN_C2 , STD_HIGH);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(KEYPAD_PIN_C3 , STD_HIGH);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <Keypad_GetButtonState>:


Keypad_ButtonStateType Keypad_GetButtonState(Keypad_ButtonType Button){
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	62 97       	sbiw	r28, 0x12	; 18
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	8a 8b       	std	Y+18, r24	; 0x12
	Keypad_ButtonStateType state = KEYPAD_NOT_PRESSED;
    1704:	19 8a       	std	Y+17, r1	; 0x11

	u8 row = Button / 3;
    1706:	8a 89       	ldd	r24, Y+18	; 0x12
    1708:	93 e0       	ldi	r25, 0x03	; 3
    170a:	69 2f       	mov	r22, r25
    170c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__udivmodqi4>
    1710:	88 8b       	std	Y+16, r24	; 0x10
	u8 column = Button % 3;
    1712:	8a 89       	ldd	r24, Y+18	; 0x12
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	69 2f       	mov	r22, r25
    1718:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__udivmodqi4>
    171c:	89 2f       	mov	r24, r25
    171e:	8f 87       	std	Y+15, r24	; 0x0f

	Keypad_SetColumnLevel(column, STD_LOW);
    1720:	8f 85       	ldd	r24, Y+15	; 0x0f
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	0e 94 21 0c 	call	0x1842	; 0x1842 <Keypad_SetColumnLevel>

	if(Keypad_GetRowLevel(row) == STD_LOW){
    1728:	88 89       	ldd	r24, Y+16	; 0x10
    172a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Keypad_GetRowLevel>
    172e:	88 23       	and	r24, r24
    1730:	09 f0       	breq	.+2      	; 0x1734 <Keypad_GetButtonState+0x46>
    1732:	79 c0       	rjmp	.+242    	; 0x1826 <Keypad_GetButtonState+0x138>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 ea       	ldi	r26, 0xA0	; 160
    173a:	b0 e4       	ldi	r27, 0x40	; 64
    173c:	8b 87       	std	Y+11, r24	; 0x0b
    173e:	9c 87       	std	Y+12, r25	; 0x0c
    1740:	ad 87       	std	Y+13, r26	; 0x0d
    1742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	8f 83       	std	Y+7, r24	; 0x07
    175e:	98 87       	std	Y+8, r25	; 0x08
    1760:	a9 87       	std	Y+9, r26	; 0x09
    1762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	2c f4       	brge	.+10     	; 0x1786 <Keypad_GetButtonState+0x98>
		__ticks = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <Keypad_GetButtonState+0x116>
	else if (__tmp > 65535)
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	4c f5       	brge	.+82     	; 0x17f0 <Keypad_GetButtonState+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179e:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <Keypad_GetButtonState+0xf8>
    17c8:	88 ec       	ldi	r24, 0xC8	; 200
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <Keypad_GetButtonState+0xe6>
    17d8:	9c 83       	std	Y+4, r25	; 0x04
    17da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <Keypad_GetButtonState+0xda>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <Keypad_GetButtonState+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <Keypad_GetButtonState+0x122>
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		if(Keypad_GetRowLevel(row) == STD_LOW){
    1818:	88 89       	ldd	r24, Y+16	; 0x10
    181a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Keypad_GetRowLevel>
    181e:	88 23       	and	r24, r24
    1820:	11 f4       	brne	.+4      	; 0x1826 <Keypad_GetButtonState+0x138>
			state = KEYPAD_PRESSED;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	89 8b       	std	Y+17, r24	; 0x11
		}
	}

	Keypad_SetColumnLevel(column, STD_HIGH);
    1826:	8f 85       	ldd	r24, Y+15	; 0x0f
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	0e 94 21 0c 	call	0x1842	; 0x1842 <Keypad_SetColumnLevel>

	return state;
    182e:	89 89       	ldd	r24, Y+17	; 0x11
}
    1830:	62 96       	adiw	r28, 0x12	; 18
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <Keypad_SetColumnLevel>:

static void Keypad_SetColumnLevel(u8 column , Dio_PinLevelType level){
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	00 d0       	rcall	.+0      	; 0x1848 <Keypad_SetColumnLevel+0x6>
    1848:	00 d0       	rcall	.+0      	; 0x184a <Keypad_SetColumnLevel+0x8>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	6a 83       	std	Y+2, r22	; 0x02
	switch(column){
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3c 83       	std	Y+4, r19	; 0x04
    185a:	2b 83       	std	Y+3, r18	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	91 05       	cpc	r25, r1
    1864:	79 f0       	breq	.+30     	; 0x1884 <Keypad_SetColumnLevel+0x42>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <Keypad_SetColumnLevel+0x4e>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	89 f4       	brne	.+34     	; 0x189a <Keypad_SetColumnLevel+0x58>
	case 0:
		Dio_SetPinLevel(KEYPAD_PIN_C1, level);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	4a 81       	ldd	r20, Y+2	; 0x02
    187e:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    1882:	0b c0       	rjmp	.+22     	; 0x189a <Keypad_SetColumnLevel+0x58>
		break;
	case 1:
		Dio_SetPinLevel(KEYPAD_PIN_C2, level);
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	4a 81       	ldd	r20, Y+2	; 0x02
    188a:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    188e:	05 c0       	rjmp	.+10     	; 0x189a <Keypad_SetColumnLevel+0x58>
		break;
	case 2:
		Dio_SetPinLevel(KEYPAD_PIN_C3, level);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	4a 81       	ldd	r20, Y+2	; 0x02
    1896:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
		break;
	default:
		break;
	}

}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <Keypad_GetRowLevel>:

static Dio_PinLevelType Keypad_GetRowLevel(u8 row){
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <Keypad_GetRowLevel+0x6>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <Keypad_GetRowLevel+0x8>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PinLevelType level = STD_HIGH;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01

	switch(row)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3c 83       	std	Y+4, r19	; 0x04
    18c2:	2b 83       	std	Y+3, r18	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	d9 f0       	breq	.+54     	; 0x1904 <Keypad_GetRowLevel+0x5c>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <Keypad_GetRowLevel+0x3a>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 f0       	breq	.+24     	; 0x18f8 <Keypad_GetRowLevel+0x50>
    18e0:	22 c0       	rjmp	.+68     	; 0x1926 <Keypad_GetRowLevel+0x7e>
    18e2:	2b 81       	ldd	r18, Y+3	; 0x03
    18e4:	3c 81       	ldd	r19, Y+4	; 0x04
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	91 f0       	breq	.+36     	; 0x1910 <Keypad_GetRowLevel+0x68>
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	99 f0       	breq	.+38     	; 0x191c <Keypad_GetRowLevel+0x74>
    18f6:	17 c0       	rjmp	.+46     	; 0x1926 <Keypad_GetRowLevel+0x7e>
	{
		case 0:
			level = Dio_ReadPinLevel(KEYPAD_PIN_R1);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	63 e0       	ldi	r22, 0x03	; 3
    18fc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <Dio_ReadPinLevel>
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	11 c0       	rjmp	.+34     	; 0x1926 <Keypad_GetRowLevel+0x7e>
			break;
		case 1:
			level = Dio_ReadPinLevel(KEYPAD_PIN_R2);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	64 e0       	ldi	r22, 0x04	; 4
    1908:	0e 94 b2 0a 	call	0x1564	; 0x1564 <Dio_ReadPinLevel>
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	0b c0       	rjmp	.+22     	; 0x1926 <Keypad_GetRowLevel+0x7e>
			break;
		case 2:
			level = Dio_ReadPinLevel(KEYPAD_PIN_R3);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	65 e0       	ldi	r22, 0x05	; 5
    1914:	0e 94 b2 0a 	call	0x1564	; 0x1564 <Dio_ReadPinLevel>
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <Keypad_GetRowLevel+0x7e>
			break;
		case 3:
			level = Dio_ReadPinLevel(KEYPAD_PIN_R4);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	66 e0       	ldi	r22, 0x06	; 6
    1920:	0e 94 b2 0a 	call	0x1564	; 0x1564 <Dio_ReadPinLevel>
    1924:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}
	return level;
    1926:	89 81       	ldd	r24, Y+1	; 0x01
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void){
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <Keypad_GetPressedButton+0x6>
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	Keypad_ButtonType button = KEYPAD_INVALID;
    1940:	8c e0       	ldi	r24, 0x0C	; 12
    1942:	89 83       	std	Y+1, r24	; 0x01

	for(i = 0 ; i < 12 ; i++){
    1944:	1a 82       	std	Y+2, r1	; 0x02
    1946:	0b c0       	rjmp	.+22     	; 0x195e <Keypad_GetPressedButton+0x28>
		if(Keypad_GetButtonState(i) == KEYPAD_PRESSED){
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Keypad_GetButtonState>
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	19 f4       	brne	.+6      	; 0x1958 <Keypad_GetPressedButton+0x22>
			button = i;
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <Keypad_GetPressedButton+0x2e>

Keypad_ButtonType Keypad_GetPressedButton(void){
	u8 i;
	Keypad_ButtonType button = KEYPAD_INVALID;

	for(i = 0 ; i < 12 ; i++){
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	8f 5f       	subi	r24, 0xFF	; 255
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	8c 30       	cpi	r24, 0x0C	; 12
    1962:	90 f3       	brcs	.-28     	; 0x1948 <Keypad_GetPressedButton+0x12>
		if(Keypad_GetButtonState(i) == KEYPAD_PRESSED){
			button = i;
			break;
		}
	}
	return button;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <Keypad_ToLcd>:


u8 Keypad_ToLcd(void){
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	00 d0       	rcall	.+0      	; 0x1976 <Keypad_ToLcd+0x6>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <Keypad_ToLcd+0x8>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	Keypad_ButtonType btn = Keypad_GetPressedButton();
    197c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <Keypad_GetPressedButton>
    1980:	8a 83       	std	Y+2, r24	; 0x02
	u8 out = 0;
    1982:	19 82       	std	Y+1, r1	; 0x01
	switch(btn){
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3c 83       	std	Y+4, r19	; 0x04
    198c:	2b 83       	std	Y+3, r18	; 0x03
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	85 30       	cpi	r24, 0x05	; 5
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <Keypad_ToLcd+0x2a>
    1998:	59 c0       	rjmp	.+178    	; 0x1a4c <Keypad_ToLcd+0xdc>
    199a:	2b 81       	ldd	r18, Y+3	; 0x03
    199c:	3c 81       	ldd	r19, Y+4	; 0x04
    199e:	26 30       	cpi	r18, 0x06	; 6
    19a0:	31 05       	cpc	r19, r1
    19a2:	04 f5       	brge	.+64     	; 0x19e4 <Keypad_ToLcd+0x74>
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	82 30       	cpi	r24, 0x02	; 2
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <Keypad_ToLcd+0x40>
    19ae:	45 c0       	rjmp	.+138    	; 0x1a3a <Keypad_ToLcd+0xca>
    19b0:	2b 81       	ldd	r18, Y+3	; 0x03
    19b2:	3c 81       	ldd	r19, Y+4	; 0x04
    19b4:	23 30       	cpi	r18, 0x03	; 3
    19b6:	31 05       	cpc	r19, r1
    19b8:	54 f4       	brge	.+20     	; 0x19ce <Keypad_ToLcd+0x5e>
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	b1 f1       	breq	.+108    	; 0x1a2e <Keypad_ToLcd+0xbe>
    19c2:	2b 81       	ldd	r18, Y+3	; 0x03
    19c4:	3c 81       	ldd	r19, Y+4	; 0x04
    19c6:	21 30       	cpi	r18, 0x01	; 1
    19c8:	31 05       	cpc	r19, r1
    19ca:	a1 f1       	breq	.+104    	; 0x1a34 <Keypad_ToLcd+0xc4>
    19cc:	53 c0       	rjmp	.+166    	; 0x1a74 <Keypad_ToLcd+0x104>
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	83 30       	cpi	r24, 0x03	; 3
    19d4:	91 05       	cpc	r25, r1
    19d6:	a1 f1       	breq	.+104    	; 0x1a40 <Keypad_ToLcd+0xd0>
    19d8:	2b 81       	ldd	r18, Y+3	; 0x03
    19da:	3c 81       	ldd	r19, Y+4	; 0x04
    19dc:	24 30       	cpi	r18, 0x04	; 4
    19de:	31 05       	cpc	r19, r1
    19e0:	91 f1       	breq	.+100    	; 0x1a46 <Keypad_ToLcd+0xd6>
    19e2:	48 c0       	rjmp	.+144    	; 0x1a74 <Keypad_ToLcd+0x104>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	91 05       	cpc	r25, r1
    19ec:	c1 f1       	breq	.+112    	; 0x1a5e <Keypad_ToLcd+0xee>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	29 30       	cpi	r18, 0x09	; 9
    19f4:	31 05       	cpc	r19, r1
    19f6:	5c f4       	brge	.+22     	; 0x1a0e <Keypad_ToLcd+0x9e>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	86 30       	cpi	r24, 0x06	; 6
    19fe:	91 05       	cpc	r25, r1
    1a00:	41 f1       	breq	.+80     	; 0x1a52 <Keypad_ToLcd+0xe2>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	27 30       	cpi	r18, 0x07	; 7
    1a08:	31 05       	cpc	r19, r1
    1a0a:	31 f1       	breq	.+76     	; 0x1a58 <Keypad_ToLcd+0xe8>
    1a0c:	33 c0       	rjmp	.+102    	; 0x1a74 <Keypad_ToLcd+0x104>
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	8a 30       	cpi	r24, 0x0A	; 10
    1a14:	91 05       	cpc	r25, r1
    1a16:	49 f1       	breq	.+82     	; 0x1a6a <Keypad_ToLcd+0xfa>
    1a18:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1c:	2a 30       	cpi	r18, 0x0A	; 10
    1a1e:	31 05       	cpc	r19, r1
    1a20:	0c f1       	brlt	.+66     	; 0x1a64 <Keypad_ToLcd+0xf4>
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	8b 30       	cpi	r24, 0x0B	; 11
    1a28:	91 05       	cpc	r25, r1
    1a2a:	11 f1       	breq	.+68     	; 0x1a70 <Keypad_ToLcd+0x100>
    1a2c:	23 c0       	rjmp	.+70     	; 0x1a74 <Keypad_ToLcd+0x104>
	case 0:
		out = '1';
    1a2e:	81 e3       	ldi	r24, 0x31	; 49
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	20 c0       	rjmp	.+64     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 1:
		out = '2';
    1a34:	82 e3       	ldi	r24, 0x32	; 50
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	1d c0       	rjmp	.+58     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 2:
		out = '3';
    1a3a:	83 e3       	ldi	r24, 0x33	; 51
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	1a c0       	rjmp	.+52     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 3:
		out = '4';
    1a40:	84 e3       	ldi	r24, 0x34	; 52
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	17 c0       	rjmp	.+46     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 4:
		out = '5';
    1a46:	85 e3       	ldi	r24, 0x35	; 53
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 5:
		out = '6';
    1a4c:	86 e3       	ldi	r24, 0x36	; 54
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	11 c0       	rjmp	.+34     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 6:
		out = '7';
    1a52:	87 e3       	ldi	r24, 0x37	; 55
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	0e c0       	rjmp	.+28     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 7:
		out = '8';
    1a58:	88 e3       	ldi	r24, 0x38	; 56
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	0b c0       	rjmp	.+22     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 8:
		out = '9';
    1a5e:	89 e3       	ldi	r24, 0x39	; 57
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	08 c0       	rjmp	.+16     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 9:
		out = '*';
    1a64:	8a e2       	ldi	r24, 0x2A	; 42
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 10:
		out = '0';
    1a6a:	80 e3       	ldi	r24, 0x30	; 48
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <Keypad_ToLcd+0x104>
		break;
	case 11:
		out = '#';
    1a70:	83 e2       	ldi	r24, 0x23	; 35
    1a72:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return out;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <Lcd_SendCommand>:
#include "Dio.h"
#include "Lcd.h"
#include "STD_TYPES.h"

void Lcd_SendCommand (u8 command)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	e9 97       	sbiw	r28, 0x39	; 57
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	89 af       	std	Y+57, r24	; 0x39
	/***LOW FOR COMMAND***/
	Dio_SetPinLevel (LCD_PIN_RS , STD_LOW);
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	65 e0       	ldi	r22, 0x05	; 5
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>

	/***LOW FOR WRITE***/
	Dio_SetPinLevel (LCD_PIN_RW , STD_LOW);
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	66 e0       	ldi	r22, 0x06	; 6
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	8d ab       	std	Y+53, r24	; 0x35
    1ab8:	9e ab       	std	Y+54, r25	; 0x36
    1aba:	af ab       	std	Y+55, r26	; 0x37
    1abc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	89 ab       	std	Y+49, r24	; 0x31
    1ad8:	9a ab       	std	Y+50, r25	; 0x32
    1ada:	ab ab       	std	Y+51, r26	; 0x33
    1adc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ade:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <Lcd_SendCommand+0x7c>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <Lcd_SendCommand+0xfa>
	else if (__tmp > 65535)
    1b00:	69 a9       	ldd	r22, Y+49	; 0x31
    1b02:	7a a9       	ldd	r23, Y+50	; 0x32
    1b04:	8b a9       	ldd	r24, Y+51	; 0x33
    1b06:	9c a9       	ldd	r25, Y+52	; 0x34
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <Lcd_SendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <Lcd_SendCommand+0xdc>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9e a7       	std	Y+46, r25	; 0x2e
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
    1b4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <Lcd_SendCommand+0xca>
    1b52:	9e a7       	std	Y+46, r25	; 0x2e
    1b54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b58:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	98 ab       	std	Y+48, r25	; 0x30
    1b5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b62:	98 a9       	ldd	r25, Y+48	; 0x30
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <Lcd_SendCommand+0xbe>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <Lcd_SendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b70:	9c a9       	ldd	r25, Y+52	; 0x34
    1b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	98 ab       	std	Y+48, r25	; 0x30
    1b7c:	8f a7       	std	Y+47, r24	; 0x2f
    1b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b80:	98 a9       	ldd	r25, Y+48	; 0x30
    1b82:	9c a7       	std	Y+44, r25	; 0x2c
    1b84:	8b a7       	std	Y+43, r24	; 0x2b
    1b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <Lcd_SendCommand+0x106>
    1b8e:	9c a7       	std	Y+44, r25	; 0x2c
    1b90:	8b a7       	std	Y+43, r24	; 0x2b


	_delay_ms(1);
	Dio_SetPinLevel (LCD_PIN_EN , STD_HIGH);
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	67 e0       	ldi	r22, 0x07	; 7
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e8       	ldi	r26, 0x80	; 128
    1ba2:	bf e3       	ldi	r27, 0x3F	; 63
    1ba4:	8f a3       	std	Y+39, r24	; 0x27
    1ba6:	98 a7       	std	Y+40, r25	; 0x28
    1ba8:	a9 a7       	std	Y+41, r26	; 0x29
    1baa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6f a1       	ldd	r22, Y+39	; 0x27
    1bae:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a ef       	ldi	r20, 0xFA	; 250
    1bba:	54 e4       	ldi	r21, 0x44	; 68
    1bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8b a3       	std	Y+35, r24	; 0x23
    1bc6:	9c a3       	std	Y+36, r25	; 0x24
    1bc8:	ad a3       	std	Y+37, r26	; 0x25
    1bca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bce:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <Lcd_SendCommand+0x16a>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a a3       	std	Y+34, r25	; 0x22
    1bea:	89 a3       	std	Y+33, r24	; 0x21
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <Lcd_SendCommand+0x1e8>
	else if (__tmp > 65535)
    1bee:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <Lcd_SendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6f a1       	ldd	r22, Y+39	; 0x27
    1c08:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9a a3       	std	Y+34, r25	; 0x22
    1c2c:	89 a3       	std	Y+33, r24	; 0x21
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <Lcd_SendCommand+0x1ca>
    1c30:	88 ec       	ldi	r24, 0xC8	; 200
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	98 a3       	std	Y+32, r25	; 0x20
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
    1c38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <Lcd_SendCommand+0x1b8>
    1c40:	98 a3       	std	Y+32, r25	; 0x20
    1c42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	89 a1       	ldd	r24, Y+33	; 0x21
    1c46:	9a a1       	ldd	r25, Y+34	; 0x22
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9a a3       	std	Y+34, r25	; 0x22
    1c4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	9a a1       	ldd	r25, Y+34	; 0x22
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <Lcd_SendCommand+0x1ac>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <Lcd_SendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9a a3       	std	Y+34, r25	; 0x22
    1c6a:	89 a3       	std	Y+33, r24	; 0x21
    1c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
    1c74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <Lcd_SendCommand+0x1f4>
    1c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Dio_SetPinLevel(LCD_PIN_D0 , GET_BIT(command , 0));
    1c80:	89 ad       	ldd	r24, Y+57	; 0x39
    1c82:	98 2f       	mov	r25, r24
    1c84:	91 70       	andi	r25, 0x01	; 1
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	49 2f       	mov	r20, r25
    1c8c:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D1 , GET_BIT(command , 1));
    1c90:	89 ad       	ldd	r24, Y+57	; 0x39
    1c92:	86 95       	lsr	r24
    1c94:	98 2f       	mov	r25, r24
    1c96:	91 70       	andi	r25, 0x01	; 1
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	49 2f       	mov	r20, r25
    1c9e:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D2 , GET_BIT(command , 2));
    1ca2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca4:	86 95       	lsr	r24
    1ca6:	86 95       	lsr	r24
    1ca8:	98 2f       	mov	r25, r24
    1caa:	91 70       	andi	r25, 0x01	; 1
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	49 2f       	mov	r20, r25
    1cb2:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D3 , GET_BIT(command , 3));
    1cb6:	89 ad       	ldd	r24, Y+57	; 0x39
    1cb8:	86 95       	lsr	r24
    1cba:	86 95       	lsr	r24
    1cbc:	86 95       	lsr	r24
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	91 70       	andi	r25, 0x01	; 1
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	63 e0       	ldi	r22, 0x03	; 3
    1cc6:	49 2f       	mov	r20, r25
    1cc8:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D4 , GET_BIT(command , 4));
    1ccc:	89 ad       	ldd	r24, Y+57	; 0x39
    1cce:	82 95       	swap	r24
    1cd0:	8f 70       	andi	r24, 0x0F	; 15
    1cd2:	98 2f       	mov	r25, r24
    1cd4:	91 70       	andi	r25, 0x01	; 1
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	64 e0       	ldi	r22, 0x04	; 4
    1cda:	49 2f       	mov	r20, r25
    1cdc:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D5 , GET_BIT(command , 5));
    1ce0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce2:	82 95       	swap	r24
    1ce4:	86 95       	lsr	r24
    1ce6:	87 70       	andi	r24, 0x07	; 7
    1ce8:	98 2f       	mov	r25, r24
    1cea:	91 70       	andi	r25, 0x01	; 1
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	65 e0       	ldi	r22, 0x05	; 5
    1cf0:	49 2f       	mov	r20, r25
    1cf2:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D6 , GET_BIT(command , 6));
    1cf6:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf8:	82 95       	swap	r24
    1cfa:	86 95       	lsr	r24
    1cfc:	86 95       	lsr	r24
    1cfe:	83 70       	andi	r24, 0x03	; 3
    1d00:	98 2f       	mov	r25, r24
    1d02:	91 70       	andi	r25, 0x01	; 1
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	66 e0       	ldi	r22, 0x06	; 6
    1d08:	49 2f       	mov	r20, r25
    1d0a:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D7 , GET_BIT(command , 7));
    1d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d10:	98 2f       	mov	r25, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	99 27       	eor	r25, r25
    1d16:	99 1f       	adc	r25, r25
    1d18:	83 e0       	ldi	r24, 0x03	; 3
    1d1a:	67 e0       	ldi	r22, 0x07	; 7
    1d1c:	49 2f       	mov	r20, r25
    1d1e:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e8       	ldi	r26, 0x80	; 128
    1d28:	bf e3       	ldi	r27, 0x3F	; 63
    1d2a:	89 8f       	std	Y+25, r24	; 0x19
    1d2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	69 8d       	ldd	r22, Y+25	; 0x19
    1d34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a ef       	ldi	r20, 0xFA	; 250
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8d 8b       	std	Y+21, r24	; 0x15
    1d4c:	9e 8b       	std	Y+22, r25	; 0x16
    1d4e:	af 8b       	std	Y+23, r26	; 0x17
    1d50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <Lcd_SendCommand+0x2f0>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <Lcd_SendCommand+0x36e>
	else if (__tmp > 65535)
    1d74:	6d 89       	ldd	r22, Y+21	; 0x15
    1d76:	7e 89       	ldd	r23, Y+22	; 0x16
    1d78:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <Lcd_SendCommand+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <Lcd_SendCommand+0x350>
    1db6:	88 ec       	ldi	r24, 0xC8	; 200
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9a 8b       	std	Y+18, r25	; 0x12
    1dbc:	89 8b       	std	Y+17, r24	; 0x11
    1dbe:	89 89       	ldd	r24, Y+17	; 0x11
    1dc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <Lcd_SendCommand+0x33e>
    1dc6:	9a 8b       	std	Y+18, r25	; 0x12
    1dc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <Lcd_SendCommand+0x332>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <Lcd_SendCommand+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6d 89       	ldd	r22, Y+21	; 0x15
    1de0:	7e 89       	ldd	r23, Y+22	; 0x16
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	8b 8b       	std	Y+19, r24	; 0x13
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	98 8b       	std	Y+16, r25	; 0x10
    1df8:	8f 87       	std	Y+15, r24	; 0x0f
    1dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfc:	98 89       	ldd	r25, Y+16	; 0x10
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <Lcd_SendCommand+0x37a>
    1e02:	98 8b       	std	Y+16, r25	; 0x10
    1e04:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	Dio_SetPinLevel (LCD_PIN_EN , STD_LOW);
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	67 e0       	ldi	r22, 0x07	; 7
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 e8       	ldi	r26, 0x80	; 128
    1e16:	bf e3       	ldi	r27, 0x3F	; 63
    1e18:	8b 87       	std	Y+11, r24	; 0x0b
    1e1a:	9c 87       	std	Y+12, r25	; 0x0c
    1e1c:	ad 87       	std	Y+13, r26	; 0x0d
    1e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	8f 83       	std	Y+7, r24	; 0x07
    1e3a:	98 87       	std	Y+8, r25	; 0x08
    1e3c:	a9 87       	std	Y+9, r26	; 0x09
    1e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <Lcd_SendCommand+0x3de>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <Lcd_SendCommand+0x45c>
	else if (__tmp > 65535)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <Lcd_SendCommand+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <Lcd_SendCommand+0x43e>
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <Lcd_SendCommand+0x42c>
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <Lcd_SendCommand+0x420>
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <Lcd_SendCommand+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <Lcd_SendCommand+0x468>
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1ef4:	e9 96       	adiw	r28, 0x39	; 57
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <Lcd_SendData>:


void Lcd_SendData(u8 command)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	e9 97       	sbiw	r28, 0x39	; 57
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	89 af       	std	Y+57, r24	; 0x39
	/***HIGH FOR DATA***/
	Dio_SetPinLevel (LCD_PIN_RS , STD_HIGH);
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	65 e0       	ldi	r22, 0x05	; 5
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>

	/***LOW FOR WRITE***/

	Dio_SetPinLevel (LCD_PIN_RW , STD_LOW);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	66 e0       	ldi	r22, 0x06	; 6
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e8       	ldi	r26, 0x80	; 128
    1f36:	bf e3       	ldi	r27, 0x3F	; 63
    1f38:	8d ab       	std	Y+53, r24	; 0x35
    1f3a:	9e ab       	std	Y+54, r25	; 0x36
    1f3c:	af ab       	std	Y+55, r26	; 0x37
    1f3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6d a9       	ldd	r22, Y+53	; 0x35
    1f42:	7e a9       	ldd	r23, Y+54	; 0x36
    1f44:	8f a9       	ldd	r24, Y+55	; 0x37
    1f46:	98 ad       	ldd	r25, Y+56	; 0x38
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a ef       	ldi	r20, 0xFA	; 250
    1f4e:	54 e4       	ldi	r21, 0x44	; 68
    1f50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	89 ab       	std	Y+49, r24	; 0x31
    1f5a:	9a ab       	std	Y+50, r25	; 0x32
    1f5c:	ab ab       	std	Y+51, r26	; 0x33
    1f5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f60:	69 a9       	ldd	r22, Y+49	; 0x31
    1f62:	7a a9       	ldd	r23, Y+50	; 0x32
    1f64:	8b a9       	ldd	r24, Y+51	; 0x33
    1f66:	9c a9       	ldd	r25, Y+52	; 0x34
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <Lcd_SendData+0x7c>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <Lcd_SendData+0xfa>
	else if (__tmp > 65535)
    1f82:	69 a9       	ldd	r22, Y+49	; 0x31
    1f84:	7a a9       	ldd	r23, Y+50	; 0x32
    1f86:	8b a9       	ldd	r24, Y+51	; 0x33
    1f88:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <Lcd_SendData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	98 ab       	std	Y+48, r25	; 0x30
    1fc0:	8f a7       	std	Y+47, r24	; 0x2f
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <Lcd_SendData+0xdc>
    1fc4:	88 ec       	ldi	r24, 0xC8	; 200
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9e a7       	std	Y+46, r25	; 0x2e
    1fca:	8d a7       	std	Y+45, r24	; 0x2d
    1fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <Lcd_SendData+0xca>
    1fd4:	9e a7       	std	Y+46, r25	; 0x2e
    1fd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fda:	98 a9       	ldd	r25, Y+48	; 0x30
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	98 ab       	std	Y+48, r25	; 0x30
    1fe0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <Lcd_SendData+0xbe>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <Lcd_SendData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	69 a9       	ldd	r22, Y+49	; 0x31
    1fee:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	98 ab       	std	Y+48, r25	; 0x30
    1ffe:	8f a7       	std	Y+47, r24	; 0x2f
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	9c a7       	std	Y+44, r25	; 0x2c
    2006:	8b a7       	std	Y+43, r24	; 0x2b
    2008:	8b a5       	ldd	r24, Y+43	; 0x2b
    200a:	9c a5       	ldd	r25, Y+44	; 0x2c
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <Lcd_SendData+0x106>
    2010:	9c a7       	std	Y+44, r25	; 0x2c
    2012:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	Dio_SetPinLevel (LCD_PIN_EN , STD_HIGH);
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	67 e0       	ldi	r22, 0x07	; 7
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 e8       	ldi	r26, 0x80	; 128
    2024:	bf e3       	ldi	r27, 0x3F	; 63
    2026:	8f a3       	std	Y+39, r24	; 0x27
    2028:	98 a7       	std	Y+40, r25	; 0x28
    202a:	a9 a7       	std	Y+41, r26	; 0x29
    202c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	6f a1       	ldd	r22, Y+39	; 0x27
    2030:	78 a5       	ldd	r23, Y+40	; 0x28
    2032:	89 a5       	ldd	r24, Y+41	; 0x29
    2034:	9a a5       	ldd	r25, Y+42	; 0x2a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a ef       	ldi	r20, 0xFA	; 250
    203c:	54 e4       	ldi	r21, 0x44	; 68
    203e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	8b a3       	std	Y+35, r24	; 0x23
    2048:	9c a3       	std	Y+36, r25	; 0x24
    204a:	ad a3       	std	Y+37, r26	; 0x25
    204c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    204e:	6b a1       	ldd	r22, Y+35	; 0x23
    2050:	7c a1       	ldd	r23, Y+36	; 0x24
    2052:	8d a1       	ldd	r24, Y+37	; 0x25
    2054:	9e a1       	ldd	r25, Y+38	; 0x26
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e8       	ldi	r20, 0x80	; 128
    205c:	5f e3       	ldi	r21, 0x3F	; 63
    205e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2062:	88 23       	and	r24, r24
    2064:	2c f4       	brge	.+10     	; 0x2070 <Lcd_SendData+0x16a>
		__ticks = 1;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9a a3       	std	Y+34, r25	; 0x22
    206c:	89 a3       	std	Y+33, r24	; 0x21
    206e:	3f c0       	rjmp	.+126    	; 0x20ee <Lcd_SendData+0x1e8>
	else if (__tmp > 65535)
    2070:	6b a1       	ldd	r22, Y+35	; 0x23
    2072:	7c a1       	ldd	r23, Y+36	; 0x24
    2074:	8d a1       	ldd	r24, Y+37	; 0x25
    2076:	9e a1       	ldd	r25, Y+38	; 0x26
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f e7       	ldi	r20, 0x7F	; 127
    207e:	57 e4       	ldi	r21, 0x47	; 71
    2080:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2084:	18 16       	cp	r1, r24
    2086:	4c f5       	brge	.+82     	; 0x20da <Lcd_SendData+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2088:	6f a1       	ldd	r22, Y+39	; 0x27
    208a:	78 a5       	ldd	r23, Y+40	; 0x28
    208c:	89 a5       	ldd	r24, Y+41	; 0x29
    208e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e2       	ldi	r20, 0x20	; 32
    2096:	51 e4       	ldi	r21, 0x41	; 65
    2098:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9a a3       	std	Y+34, r25	; 0x22
    20ae:	89 a3       	std	Y+33, r24	; 0x21
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <Lcd_SendData+0x1ca>
    20b2:	88 ec       	ldi	r24, 0xC8	; 200
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	98 a3       	std	Y+32, r25	; 0x20
    20b8:	8f 8f       	std	Y+31, r24	; 0x1f
    20ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20bc:	98 a1       	ldd	r25, Y+32	; 0x20
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <Lcd_SendData+0x1b8>
    20c2:	98 a3       	std	Y+32, r25	; 0x20
    20c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	89 a1       	ldd	r24, Y+33	; 0x21
    20c8:	9a a1       	ldd	r25, Y+34	; 0x22
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	9a a3       	std	Y+34, r25	; 0x22
    20ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d0:	89 a1       	ldd	r24, Y+33	; 0x21
    20d2:	9a a1       	ldd	r25, Y+34	; 0x22
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	69 f7       	brne	.-38     	; 0x20b2 <Lcd_SendData+0x1ac>
    20d8:	14 c0       	rjmp	.+40     	; 0x2102 <Lcd_SendData+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20da:	6b a1       	ldd	r22, Y+35	; 0x23
    20dc:	7c a1       	ldd	r23, Y+36	; 0x24
    20de:	8d a1       	ldd	r24, Y+37	; 0x25
    20e0:	9e a1       	ldd	r25, Y+38	; 0x26
    20e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9a a3       	std	Y+34, r25	; 0x22
    20ec:	89 a3       	std	Y+33, r24	; 0x21
    20ee:	89 a1       	ldd	r24, Y+33	; 0x21
    20f0:	9a a1       	ldd	r25, Y+34	; 0x22
    20f2:	9e 8f       	std	Y+30, r25	; 0x1e
    20f4:	8d 8f       	std	Y+29, r24	; 0x1d
    20f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <Lcd_SendData+0x1f4>
    20fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2100:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	Dio_SetPinLevel(LCD_PIN_D0 , GET_BIT(command , 0));
    2102:	89 ad       	ldd	r24, Y+57	; 0x39
    2104:	98 2f       	mov	r25, r24
    2106:	91 70       	andi	r25, 0x01	; 1
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	49 2f       	mov	r20, r25
    210e:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D1 , GET_BIT(command , 1));
    2112:	89 ad       	ldd	r24, Y+57	; 0x39
    2114:	86 95       	lsr	r24
    2116:	98 2f       	mov	r25, r24
    2118:	91 70       	andi	r25, 0x01	; 1
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	49 2f       	mov	r20, r25
    2120:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D2 , GET_BIT(command , 2));
    2124:	89 ad       	ldd	r24, Y+57	; 0x39
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	98 2f       	mov	r25, r24
    212c:	91 70       	andi	r25, 0x01	; 1
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	62 e0       	ldi	r22, 0x02	; 2
    2132:	49 2f       	mov	r20, r25
    2134:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D3 , GET_BIT(command , 3));
    2138:	89 ad       	ldd	r24, Y+57	; 0x39
    213a:	86 95       	lsr	r24
    213c:	86 95       	lsr	r24
    213e:	86 95       	lsr	r24
    2140:	98 2f       	mov	r25, r24
    2142:	91 70       	andi	r25, 0x01	; 1
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	63 e0       	ldi	r22, 0x03	; 3
    2148:	49 2f       	mov	r20, r25
    214a:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D4 , GET_BIT(command , 4));
    214e:	89 ad       	ldd	r24, Y+57	; 0x39
    2150:	82 95       	swap	r24
    2152:	8f 70       	andi	r24, 0x0F	; 15
    2154:	98 2f       	mov	r25, r24
    2156:	91 70       	andi	r25, 0x01	; 1
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	64 e0       	ldi	r22, 0x04	; 4
    215c:	49 2f       	mov	r20, r25
    215e:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D5 , GET_BIT(command , 5));
    2162:	89 ad       	ldd	r24, Y+57	; 0x39
    2164:	82 95       	swap	r24
    2166:	86 95       	lsr	r24
    2168:	87 70       	andi	r24, 0x07	; 7
    216a:	98 2f       	mov	r25, r24
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	65 e0       	ldi	r22, 0x05	; 5
    2172:	49 2f       	mov	r20, r25
    2174:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D6 , GET_BIT(command , 6));
    2178:	89 ad       	ldd	r24, Y+57	; 0x39
    217a:	82 95       	swap	r24
    217c:	86 95       	lsr	r24
    217e:	86 95       	lsr	r24
    2180:	83 70       	andi	r24, 0x03	; 3
    2182:	98 2f       	mov	r25, r24
    2184:	91 70       	andi	r25, 0x01	; 1
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	66 e0       	ldi	r22, 0x06	; 6
    218a:	49 2f       	mov	r20, r25
    218c:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
	Dio_SetPinLevel(LCD_PIN_D7 , GET_BIT(command , 7));
    2190:	89 ad       	ldd	r24, Y+57	; 0x39
    2192:	98 2f       	mov	r25, r24
    2194:	99 1f       	adc	r25, r25
    2196:	99 27       	eor	r25, r25
    2198:	99 1f       	adc	r25, r25
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	67 e0       	ldi	r22, 0x07	; 7
    219e:	49 2f       	mov	r20, r25
    21a0:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a0 e8       	ldi	r26, 0x80	; 128
    21aa:	bf e3       	ldi	r27, 0x3F	; 63
    21ac:	89 8f       	std	Y+25, r24	; 0x19
    21ae:	9a 8f       	std	Y+26, r25	; 0x1a
    21b0:	ab 8f       	std	Y+27, r26	; 0x1b
    21b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	69 8d       	ldd	r22, Y+25	; 0x19
    21b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a ef       	ldi	r20, 0xFA	; 250
    21c2:	54 e4       	ldi	r21, 0x44	; 68
    21c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8d 8b       	std	Y+21, r24	; 0x15
    21ce:	9e 8b       	std	Y+22, r25	; 0x16
    21d0:	af 8b       	std	Y+23, r26	; 0x17
    21d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <Lcd_SendData+0x2f0>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9c 8b       	std	Y+20, r25	; 0x14
    21f2:	8b 8b       	std	Y+19, r24	; 0x13
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <Lcd_SendData+0x36e>
	else if (__tmp > 65535)
    21f6:	6d 89       	ldd	r22, Y+21	; 0x15
    21f8:	7e 89       	ldd	r23, Y+22	; 0x16
    21fa:	8f 89       	ldd	r24, Y+23	; 0x17
    21fc:	98 8d       	ldd	r25, Y+24	; 0x18
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	4f e7       	ldi	r20, 0x7F	; 127
    2204:	57 e4       	ldi	r21, 0x47	; 71
    2206:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    220a:	18 16       	cp	r1, r24
    220c:	4c f5       	brge	.+82     	; 0x2260 <Lcd_SendData+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	8b 8b       	std	Y+19, r24	; 0x13
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <Lcd_SendData+0x350>
    2238:	88 ec       	ldi	r24, 0xC8	; 200
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9a 8b       	std	Y+18, r25	; 0x12
    223e:	89 8b       	std	Y+17, r24	; 0x11
    2240:	89 89       	ldd	r24, Y+17	; 0x11
    2242:	9a 89       	ldd	r25, Y+18	; 0x12
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <Lcd_SendData+0x33e>
    2248:	9a 8b       	std	Y+18, r25	; 0x12
    224a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f7       	brne	.-38     	; 0x2238 <Lcd_SendData+0x332>
    225e:	14 c0       	rjmp	.+40     	; 0x2288 <Lcd_SendData+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2260:	6d 89       	ldd	r22, Y+21	; 0x15
    2262:	7e 89       	ldd	r23, Y+22	; 0x16
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
    2274:	8b 89       	ldd	r24, Y+19	; 0x13
    2276:	9c 89       	ldd	r25, Y+20	; 0x14
    2278:	98 8b       	std	Y+16, r25	; 0x10
    227a:	8f 87       	std	Y+15, r24	; 0x0f
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	98 89       	ldd	r25, Y+16	; 0x10
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <Lcd_SendData+0x37a>
    2284:	98 8b       	std	Y+16, r25	; 0x10
    2286:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	Dio_SetPinLevel (LCD_PIN_EN , STD_LOW);
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	67 e0       	ldi	r22, 0x07	; 7
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	0e 94 6f 08 	call	0x10de	; 0x10de <Dio_SetPinLevel>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e8       	ldi	r26, 0x80	; 128
    2298:	bf e3       	ldi	r27, 0x3F	; 63
    229a:	8b 87       	std	Y+11, r24	; 0x0b
    229c:	9c 87       	std	Y+12, r25	; 0x0c
    229e:	ad 87       	std	Y+13, r26	; 0x0d
    22a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a ef       	ldi	r20, 0xFA	; 250
    22b0:	54 e4       	ldi	r21, 0x44	; 68
    22b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8f 83       	std	Y+7, r24	; 0x07
    22bc:	98 87       	std	Y+8, r25	; 0x08
    22be:	a9 87       	std	Y+9, r26	; 0x09
    22c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <Lcd_SendData+0x3de>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	3f c0       	rjmp	.+126    	; 0x2362 <Lcd_SendData+0x45c>
	else if (__tmp > 65535)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	4c f5       	brge	.+82     	; 0x234e <Lcd_SendData+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	0f c0       	rjmp	.+30     	; 0x2344 <Lcd_SendData+0x43e>
    2326:	88 ec       	ldi	r24, 0xC8	; 200
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <Lcd_SendData+0x42c>
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	69 f7       	brne	.-38     	; 0x2326 <Lcd_SendData+0x420>
    234c:	14 c0       	rjmp	.+40     	; 0x2376 <Lcd_SendData+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <Lcd_SendData+0x468>
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2376:	e9 96       	adiw	r28, 0x39	; 57
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <Lcd_InitPins>:

void Lcd_InitPins(void)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	DioSetPinMode (LCD_PIN_EN , DIO_PIN_OUTPUT);
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	67 e0       	ldi	r22, 0x07	; 7
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_RS , DIO_PIN_OUTPUT);
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	65 e0       	ldi	r22, 0x05	; 5
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_RW , DIO_PIN_OUTPUT);
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	66 e0       	ldi	r22, 0x06	; 6
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D0 , DIO_PIN_OUTPUT);
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D1 , DIO_PIN_OUTPUT);
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D2 , DIO_PIN_OUTPUT);
    23c2:	83 e0       	ldi	r24, 0x03	; 3
    23c4:	62 e0       	ldi	r22, 0x02	; 2
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D3 , DIO_PIN_OUTPUT);
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	63 e0       	ldi	r22, 0x03	; 3
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D4 , DIO_PIN_OUTPUT);
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	64 e0       	ldi	r22, 0x04	; 4
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D5 , DIO_PIN_OUTPUT);
    23e0:	83 e0       	ldi	r24, 0x03	; 3
    23e2:	65 e0       	ldi	r22, 0x05	; 5
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D6 , DIO_PIN_OUTPUT);
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	66 e0       	ldi	r22, 0x06	; 6
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>
	DioSetPinMode (LCD_PIN_D7 , DIO_PIN_OUTPUT);
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	67 e0       	ldi	r22, 0x07	; 7
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DioSetPinMode>

}
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <Lcd_Init>:


void Lcd_Init (void)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	2e 97       	sbiw	r28, 0x0e	; 14
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e2       	ldi	r26, 0x20	; 32
    241e:	b2 e4       	ldi	r27, 0x42	; 66
    2420:	8b 87       	std	Y+11, r24	; 0x0b
    2422:	9c 87       	std	Y+12, r25	; 0x0c
    2424:	ad 87       	std	Y+13, r26	; 0x0d
    2426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	6b 85       	ldd	r22, Y+11	; 0x0b
    242a:	7c 85       	ldd	r23, Y+12	; 0x0c
    242c:	8d 85       	ldd	r24, Y+13	; 0x0d
    242e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a ef       	ldi	r20, 0xFA	; 250
    2436:	54 e4       	ldi	r21, 0x44	; 68
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8f 83       	std	Y+7, r24	; 0x07
    2442:	98 87       	std	Y+8, r25	; 0x08
    2444:	a9 87       	std	Y+9, r26	; 0x09
    2446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <Lcd_Init+0x66>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <Lcd_Init+0xe4>
	else if (__tmp > 65535)
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <Lcd_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	6b 85       	ldd	r22, Y+11	; 0x0b
    2484:	7c 85       	ldd	r23, Y+12	; 0x0c
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <Lcd_Init+0xc6>
    24ac:	88 ec       	ldi	r24, 0xC8	; 200
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9c 83       	std	Y+4, r25	; 0x04
    24b2:	8b 83       	std	Y+3, r24	; 0x03
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <Lcd_Init+0xb4>
    24bc:	9c 83       	std	Y+4, r25	; 0x04
    24be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	9e 81       	ldd	r25, Y+6	; 0x06
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <Lcd_Init+0xa8>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <Lcd_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	6f 81       	ldd	r22, Y+7	; 0x07
    24d6:	78 85       	ldd	r23, Y+8	; 0x08
    24d8:	89 85       	ldd	r24, Y+9	; 0x09
    24da:	9a 85       	ldd	r25, Y+10	; 0x0a
    24dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <Lcd_Init+0xf0>
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

	/*Function set command : 2 lines , 5*8 font size*/
	Lcd_SendCommand(0b00111000);
    24fc:	88 e3       	ldi	r24, 0x38	; 56
    24fe:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_SendCommand>

	/*Display ON/OFF control : display enable , disable cursior , no blink cursior*/
	Lcd_SendCommand(0b00001100);
    2502:	8c e0       	ldi	r24, 0x0C	; 12
    2504:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_SendCommand>

	/*Clear Display*/
	Lcd_SendCommand(0b00000001);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_SendCommand>
}
    250e:	2e 96       	adiw	r28, 0x0e	; 14
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <Lcd_ClearDisplay>:

void Lcd_ClearDisplay(void){
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	/*Clear Display*/
	Lcd_SendCommand(0b00000001);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_SendCommand>
}
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <Lcd_DisplayString>:

void Lcd_DisplayString(const u8 *str)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <Lcd_DisplayString+0x6>
    253a:	0f 92       	push	r0
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	9b 83       	std	Y+3, r25	; 0x03
    2542:	8a 83       	std	Y+2, r24	; 0x02
	u8 i= 0;
    2544:	19 82       	std	Y+1, r1	; 0x01
    2546:	0a c0       	rjmp	.+20     	; 0x255c <Lcd_DisplayString+0x28>
	while(str[i] != '\0')
	{
		Lcd_SendData(*str);
    2548:	ea 81       	ldd	r30, Y+2	; 0x02
    254a:	fb 81       	ldd	r31, Y+3	; 0x03
    254c:	80 81       	ld	r24, Z
    254e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Lcd_SendData>
		str++;
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	9b 83       	std	Y+3, r25	; 0x03
    255a:	8a 83       	std	Y+2, r24	; 0x02
}

void Lcd_DisplayString(const u8 *str)
{
	u8 i= 0;
	while(str[i] != '\0')
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	9b 81       	ldd	r25, Y+3	; 0x03
    2566:	fc 01       	movw	r30, r24
    2568:	e2 0f       	add	r30, r18
    256a:	f3 1f       	adc	r31, r19
    256c:	80 81       	ld	r24, Z
    256e:	88 23       	and	r24, r24
    2570:	59 f7       	brne	.-42     	; 0x2548 <Lcd_DisplayString+0x14>
	{
		Lcd_SendData(*str);
		str++;
	}
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <GotoXY>:

void GotoXY(u8 x, u8 y)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <GotoXY+0x6>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <GotoXY+0x8>
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	8a 83       	std	Y+2, r24	; 0x02
    258e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch(x){
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	3d 83       	std	Y+5, r19	; 0x05
    2598:	2c 83       	std	Y+4, r18	; 0x04
    259a:	8c 81       	ldd	r24, Y+4	; 0x04
    259c:	9d 81       	ldd	r25, Y+5	; 0x05
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	91 05       	cpc	r25, r1
    25a2:	31 f0       	breq	.+12     	; 0x25b0 <GotoXY+0x32>
    25a4:	2c 81       	ldd	r18, Y+4	; 0x04
    25a6:	3d 81       	ldd	r19, Y+5	; 0x05
    25a8:	22 30       	cpi	r18, 0x02	; 2
    25aa:	31 05       	cpc	r19, r1
    25ac:	21 f0       	breq	.+8      	; 0x25b6 <GotoXY+0x38>
    25ae:	06 c0       	rjmp	.+12     	; 0x25bc <GotoXY+0x3e>
	case 1:
		Address = y;
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	03 c0       	rjmp	.+6      	; 0x25bc <GotoXY+0x3e>
		break;
	case 2:
		Address = y + 64;
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	80 5c       	subi	r24, 0xC0	; 192
    25ba:	89 83       	std	Y+1, r24	; 0x01
	}
	Lcd_SendCommand((Address + 128));
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	80 58       	subi	r24, 0x80	; 128
    25c0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_SendCommand>
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <Password>:
#include "STD_TYPES.h"
#include "Keypad.h"
#include "Lcd.h"
#include "Protection.h"

u8 Password(u8* correct_pass){		//Asks the user for a password and returns pointer to array of it
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	66 97       	sbiw	r28, 0x16	; 22
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	9e 8b       	std	Y+22, r25	; 0x16
    25ea:	8d 8b       	std	Y+21, r24	; 0x15
	Lcd_DisplayString("Enter Pass: ");
    25ec:	80 e6       	ldi	r24, 0x60	; 96
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	0e 94 9a 12 	call	0x2534	; 0x2534 <Lcd_DisplayString>
	u8 input, count = 0;
    25f4:	1f 86       	std	Y+15, r1	; 0x0f
    25f6:	89 c0       	rjmp	.+274    	; 0x270a <Password+0x136>
	u8 entered_pass[4];
	while(count != 4){
		input = Keypad_ToLcd();
    25f8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <Keypad_ToLcd>
    25fc:	88 8b       	std	Y+16, r24	; 0x10
		if(input != 0){
    25fe:	88 89       	ldd	r24, Y+16	; 0x10
    2600:	88 23       	and	r24, r24
    2602:	09 f4       	brne	.+2      	; 0x2606 <Password+0x32>
    2604:	82 c0       	rjmp	.+260    	; 0x270a <Password+0x136>
			Lcd_SendData(input);
    2606:	88 89       	ldd	r24, Y+16	; 0x10
    2608:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Lcd_SendData>
			entered_pass[count] = input;
    260c:	8f 85       	ldd	r24, Y+15	; 0x0f
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	ce 01       	movw	r24, r28
    2614:	41 96       	adiw	r24, 0x11	; 17
    2616:	fc 01       	movw	r30, r24
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	88 89       	ldd	r24, Y+16	; 0x10
    261e:	80 83       	st	Z, r24
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	aa ef       	ldi	r26, 0xFA	; 250
    2626:	b3 e4       	ldi	r27, 0x43	; 67
    2628:	8b 87       	std	Y+11, r24	; 0x0b
    262a:	9c 87       	std	Y+12, r25	; 0x0c
    262c:	ad 87       	std	Y+13, r26	; 0x0d
    262e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2630:	6b 85       	ldd	r22, Y+11	; 0x0b
    2632:	7c 85       	ldd	r23, Y+12	; 0x0c
    2634:	8d 85       	ldd	r24, Y+13	; 0x0d
    2636:	9e 85       	ldd	r25, Y+14	; 0x0e
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a ef       	ldi	r20, 0xFA	; 250
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8f 83       	std	Y+7, r24	; 0x07
    264a:	98 87       	std	Y+8, r25	; 0x08
    264c:	a9 87       	std	Y+9, r26	; 0x09
    264e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	2c f4       	brge	.+10     	; 0x2672 <Password+0x9e>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <Password+0x11c>
	else if (__tmp > 65535)
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	4c f5       	brge	.+82     	; 0x26dc <Password+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268a:	6b 85       	ldd	r22, Y+11	; 0x0b
    268c:	7c 85       	ldd	r23, Y+12	; 0x0c
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	9e 85       	ldd	r25, Y+14	; 0x0e
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e2       	ldi	r20, 0x20	; 32
    2698:	51 e4       	ldi	r21, 0x41	; 65
    269a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9e 83       	std	Y+6, r25	; 0x06
    26b0:	8d 83       	std	Y+5, r24	; 0x05
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <Password+0xfe>
    26b4:	88 ec       	ldi	r24, 0xC8	; 200
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	8b 83       	std	Y+3, r24	; 0x03
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <Password+0xec>
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	69 f7       	brne	.-38     	; 0x26b4 <Password+0xe0>
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <Password+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <Password+0x128>
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			count++;
    2704:	8f 85       	ldd	r24, Y+15	; 0x0f
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	8f 87       	std	Y+15, r24	; 0x0f

u8 Password(u8* correct_pass){		//Asks the user for a password and returns pointer to array of it
	Lcd_DisplayString("Enter Pass: ");
	u8 input, count = 0;
	u8 entered_pass[4];
	while(count != 4){
    270a:	8f 85       	ldd	r24, Y+15	; 0x0f
    270c:	84 30       	cpi	r24, 0x04	; 4
    270e:	09 f0       	breq	.+2      	; 0x2712 <Password+0x13e>
    2710:	73 cf       	rjmp	.-282    	; 0x25f8 <Password+0x24>
			entered_pass[count] = input;
			_delay_ms(500);
			count++;
		}
	}
	return Pass_Check(correct_pass, entered_pass);
    2712:	8d 89       	ldd	r24, Y+21	; 0x15
    2714:	9e 89       	ldd	r25, Y+22	; 0x16
    2716:	9e 01       	movw	r18, r28
    2718:	2f 5e       	subi	r18, 0xEF	; 239
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	b9 01       	movw	r22, r18
    271e:	0e 94 9a 13 	call	0x2734	; 0x2734 <Pass_Check>
}
    2722:	66 96       	adiw	r28, 0x16	; 22
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <Pass_Check>:

u8 Pass_Check(u8* correct_pass, u8* entered_pass){		//Checks if the entered password is correct and returns boolean value
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	00 d0       	rcall	.+0      	; 0x273a <Pass_Check+0x6>
    273a:	00 d0       	rcall	.+0      	; 0x273c <Pass_Check+0x8>
    273c:	00 d0       	rcall	.+0      	; 0x273e <Pass_Check+0xa>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9c 83       	std	Y+4, r25	; 0x04
    2744:	8b 83       	std	Y+3, r24	; 0x03
    2746:	7e 83       	std	Y+6, r23	; 0x06
    2748:	6d 83       	std	Y+5, r22	; 0x05
	u8 l = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0 ; i < 4 ; i++){
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	1b c0       	rjmp	.+54     	; 0x2788 <Pass_Check+0x54>
		if(correct_pass[i] != entered_pass[i]){
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	40 81       	ld	r20, Z
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	fc 01       	movw	r30, r24
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	80 81       	ld	r24, Z
    2776:	48 17       	cp	r20, r24
    2778:	21 f0       	breq	.+8      	; 0x2782 <Pass_Check+0x4e>
			l--;
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	81 50       	subi	r24, 0x01	; 1
    277e:	8a 83       	std	Y+2, r24	; 0x02
    2780:	06 c0       	rjmp	.+12     	; 0x278e <Pass_Check+0x5a>
	return Pass_Check(correct_pass, entered_pass);
}

u8 Pass_Check(u8* correct_pass, u8* entered_pass){		//Checks if the entered password is correct and returns boolean value
	u8 l = 1;
	for(u8 i = 0 ; i < 4 ; i++){
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	84 30       	cpi	r24, 0x04	; 4
    278c:	10 f3       	brcs	.-60     	; 0x2752 <Pass_Check+0x1e>
		if(correct_pass[i] != entered_pass[i]){
			l--;
			break;
		}
	}
	return l;
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2790:	26 96       	adiw	r28, 0x06	; 6
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <main>:
#include "Lcd.h"
#include "Protection.h"

u8 correct_pass[4] = {'6', '4', '7', '6'};

void main(){
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	6d 97       	sbiw	r28, 0x1d	; 29
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
	Lcd_InitPins();
    27b6:	0e 94 c4 11 	call	0x2388	; 0x2388 <Lcd_InitPins>
	Lcd_Init();
    27ba:	0e 94 02 12 	call	0x2404	; 0x2404 <Lcd_Init>
	Keypad_Init();
    27be:	0e 94 3e 0b 	call	0x167c	; 0x167c <Keypad_Init>
	Lcd_DisplayString("SELEEM PRO. CO.");
    27c2:	8d e6       	ldi	r24, 0x6D	; 109
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 9a 12 	call	0x2534	; 0x2534 <Lcd_DisplayString>
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e8       	ldi	r25, 0x80	; 128
    27ce:	ab e3       	ldi	r26, 0x3B	; 59
    27d0:	b5 e4       	ldi	r27, 0x45	; 69
    27d2:	89 8f       	std	Y+25, r24	; 0x19
    27d4:	9a 8f       	std	Y+26, r25	; 0x1a
    27d6:	ab 8f       	std	Y+27, r26	; 0x1b
    27d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27da:	69 8d       	ldd	r22, Y+25	; 0x19
    27dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a ef       	ldi	r20, 0xFA	; 250
    27e8:	54 e4       	ldi	r21, 0x44	; 68
    27ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	8d 8b       	std	Y+21, r24	; 0x15
    27f4:	9e 8b       	std	Y+22, r25	; 0x16
    27f6:	af 8b       	std	Y+23, r26	; 0x17
    27f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27fa:	6d 89       	ldd	r22, Y+21	; 0x15
    27fc:	7e 89       	ldd	r23, Y+22	; 0x16
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e8       	ldi	r20, 0x80	; 128
    2808:	5f e3       	ldi	r21, 0x3F	; 63
    280a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    280e:	88 23       	and	r24, r24
    2810:	2c f4       	brge	.+10     	; 0x281c <main+0x7a>
		__ticks = 1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	3f c0       	rjmp	.+126    	; 0x289a <main+0xf8>
	else if (__tmp > 65535)
    281c:	6d 89       	ldd	r22, Y+21	; 0x15
    281e:	7e 89       	ldd	r23, Y+22	; 0x16
    2820:	8f 89       	ldd	r24, Y+23	; 0x17
    2822:	98 8d       	ldd	r25, Y+24	; 0x18
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	4c f5       	brge	.+82     	; 0x2886 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	69 8d       	ldd	r22, Y+25	; 0x19
    2836:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2838:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9c 8b       	std	Y+20, r25	; 0x14
    285a:	8b 8b       	std	Y+19, r24	; 0x13
    285c:	0f c0       	rjmp	.+30     	; 0x287c <main+0xda>
    285e:	88 ec       	ldi	r24, 0xC8	; 200
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9a 8b       	std	Y+18, r25	; 0x12
    2864:	89 8b       	std	Y+17, r24	; 0x11
    2866:	89 89       	ldd	r24, Y+17	; 0x11
    2868:	9a 89       	ldd	r25, Y+18	; 0x12
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <main+0xc8>
    286e:	9a 8b       	std	Y+18, r25	; 0x12
    2870:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2872:	8b 89       	ldd	r24, Y+19	; 0x13
    2874:	9c 89       	ldd	r25, Y+20	; 0x14
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9c 8b       	std	Y+20, r25	; 0x14
    287a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287c:	8b 89       	ldd	r24, Y+19	; 0x13
    287e:	9c 89       	ldd	r25, Y+20	; 0x14
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	69 f7       	brne	.-38     	; 0x285e <main+0xbc>
    2884:	14 c0       	rjmp	.+40     	; 0x28ae <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	6d 89       	ldd	r22, Y+21	; 0x15
    2888:	7e 89       	ldd	r23, Y+22	; 0x16
    288a:	8f 89       	ldd	r24, Y+23	; 0x17
    288c:	98 8d       	ldd	r25, Y+24	; 0x18
    288e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9c 8b       	std	Y+20, r25	; 0x14
    2898:	8b 8b       	std	Y+19, r24	; 0x13
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	9c 89       	ldd	r25, Y+20	; 0x14
    289e:	98 8b       	std	Y+16, r25	; 0x10
    28a0:	8f 87       	std	Y+15, r24	; 0x0f
    28a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a4:	98 89       	ldd	r25, Y+16	; 0x10
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <main+0x104>
    28aa:	98 8b       	std	Y+16, r25	; 0x10
    28ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);
	Lcd_ClearDisplay();
    28ae:	0e 94 90 12 	call	0x2520	; 0x2520 <Lcd_ClearDisplay>
	while(1){
		u8 l = Password(correct_pass);
    28b2:	8e ea       	ldi	r24, 0xAE	; 174
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <Password>
    28ba:	8d 8f       	std	Y+29, r24	; 0x1d
		if(l == 1){
    28bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	79 f4       	brne	.+30     	; 0x28e0 <main+0x13e>
			Lcd_ClearDisplay();
    28c2:	0e 94 90 12 	call	0x2520	; 0x2520 <Lcd_ClearDisplay>
			Lcd_DisplayString("Welcome Sir!");
    28c6:	8d e7       	ldi	r24, 0x7D	; 125
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 9a 12 	call	0x2534	; 0x2534 <Lcd_DisplayString>
			Lcd_DisplayString("Try Again...");
			_delay_ms(1000);
			Lcd_ClearDisplay();
		}
	}
}
    28ce:	6d 96       	adiw	r28, 0x1d	; 29
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret
			Lcd_ClearDisplay();
			Lcd_DisplayString("Welcome Sir!");
			break;
		}
		else{
			Lcd_ClearDisplay();
    28e0:	0e 94 90 12 	call	0x2520	; 0x2520 <Lcd_ClearDisplay>
			Lcd_DisplayString("Wrong password");
    28e4:	8a e8       	ldi	r24, 0x8A	; 138
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 9a 12 	call	0x2534	; 0x2534 <Lcd_DisplayString>
			GotoXY(2,0);
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	0e 94 bf 12 	call	0x257e	; 0x257e <GotoXY>
			Lcd_DisplayString("Try Again...");
    28f4:	89 e9       	ldi	r24, 0x99	; 153
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 9a 12 	call	0x2534	; 0x2534 <Lcd_DisplayString>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	aa e7       	ldi	r26, 0x7A	; 122
    2902:	b4 e4       	ldi	r27, 0x44	; 68
    2904:	8b 87       	std	Y+11, r24	; 0x0b
    2906:	9c 87       	std	Y+12, r25	; 0x0c
    2908:	ad 87       	std	Y+13, r26	; 0x0d
    290a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6b 85       	ldd	r22, Y+11	; 0x0b
    290e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2910:	8d 85       	ldd	r24, Y+13	; 0x0d
    2912:	9e 85       	ldd	r25, Y+14	; 0x0e
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a ef       	ldi	r20, 0xFA	; 250
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8f 83       	std	Y+7, r24	; 0x07
    2926:	98 87       	std	Y+8, r25	; 0x08
    2928:	a9 87       	std	Y+9, r26	; 0x09
    292a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <main+0x1ac>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <main+0x22a>
	else if (__tmp > 65535)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <main+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6b 85       	ldd	r22, Y+11	; 0x0b
    2968:	7c 85       	ldd	r23, Y+12	; 0x0c
    296a:	8d 85       	ldd	r24, Y+13	; 0x0d
    296c:	9e 85       	ldd	r25, Y+14	; 0x0e
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <main+0x20c>
    2990:	88 ec       	ldi	r24, 0xC8	; 200
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9c 83       	std	Y+4, r25	; 0x04
    2996:	8b 83       	std	Y+3, r24	; 0x03
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <main+0x1fa>
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <main+0x1ee>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <main+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <main+0x236>
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Lcd_ClearDisplay();
    29e0:	0e 94 90 12 	call	0x2520	; 0x2520 <Lcd_ClearDisplay>
    29e4:	66 cf       	rjmp	.-308    	; 0x28b2 <main+0x110>

000029e6 <__udivmodqi4>:
    29e6:	99 1b       	sub	r25, r25
    29e8:	79 e0       	ldi	r23, 0x09	; 9
    29ea:	04 c0       	rjmp	.+8      	; 0x29f4 <__udivmodqi4_ep>

000029ec <__udivmodqi4_loop>:
    29ec:	99 1f       	adc	r25, r25
    29ee:	96 17       	cp	r25, r22
    29f0:	08 f0       	brcs	.+2      	; 0x29f4 <__udivmodqi4_ep>
    29f2:	96 1b       	sub	r25, r22

000029f4 <__udivmodqi4_ep>:
    29f4:	88 1f       	adc	r24, r24
    29f6:	7a 95       	dec	r23
    29f8:	c9 f7       	brne	.-14     	; 0x29ec <__udivmodqi4_loop>
    29fa:	80 95       	com	r24
    29fc:	08 95       	ret

000029fe <__prologue_saves__>:
    29fe:	2f 92       	push	r2
    2a00:	3f 92       	push	r3
    2a02:	4f 92       	push	r4
    2a04:	5f 92       	push	r5
    2a06:	6f 92       	push	r6
    2a08:	7f 92       	push	r7
    2a0a:	8f 92       	push	r8
    2a0c:	9f 92       	push	r9
    2a0e:	af 92       	push	r10
    2a10:	bf 92       	push	r11
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	ca 1b       	sub	r28, r26
    2a28:	db 0b       	sbc	r29, r27
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	09 94       	ijmp

00002a36 <__epilogue_restores__>:
    2a36:	2a 88       	ldd	r2, Y+18	; 0x12
    2a38:	39 88       	ldd	r3, Y+17	; 0x11
    2a3a:	48 88       	ldd	r4, Y+16	; 0x10
    2a3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a48:	b9 84       	ldd	r11, Y+9	; 0x09
    2a4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a4c:	df 80       	ldd	r13, Y+7	; 0x07
    2a4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a50:	fd 80       	ldd	r15, Y+5	; 0x05
    2a52:	0c 81       	ldd	r16, Y+4	; 0x04
    2a54:	1b 81       	ldd	r17, Y+3	; 0x03
    2a56:	aa 81       	ldd	r26, Y+2	; 0x02
    2a58:	b9 81       	ldd	r27, Y+1	; 0x01
    2a5a:	ce 0f       	add	r28, r30
    2a5c:	d1 1d       	adc	r29, r1
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	ed 01       	movw	r28, r26
    2a6a:	08 95       	ret

00002a6c <_exit>:
    2a6c:	f8 94       	cli

00002a6e <__stop_program>:
    2a6e:	ff cf       	rjmp	.-2      	; 0x2a6e <__stop_program>
